
MultiSensorFutaba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  000016ea  0000179e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011c  008001da  008001da  00001878  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  00001878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b0  00000000  00000000  000018f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b23  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d5  00000000  00000000  000046c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000172e  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000072c  00000000  00000000  00006ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001250  00000000  00000000  000075f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001f03  00000000  00000000  00008844  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000208  00000000  00000000  0000a747  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ee       	ldi	r30, 0xEA	; 234
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3d       	cpi	r26, 0xDA	; 218
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa ed       	ldi	r26, 0xDA	; 218
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3f       	cpi	r26, 0xF6	; 246
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 5d 05 	call	0xaba	; 0xaba <main>
      9e:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z15CCesc_pwm_setupv>:

    if (value > offset0_5)
        new_value = value - offset0_5;

    return new_value;
}
      a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
      aa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
      ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
      b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
      b6:	16 ba       	out	0x16, r1	; 22
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
      be:	53 9a       	sbi	0x0a, 3	; 10
      c0:	3c 9a       	sbi	0x07, 4	; 7
      c2:	3d 9a       	sbi	0x07, 5	; 7
      c4:	08 95       	ret

000000c6 <_Z13SetupRefTimerv>:
      c6:	15 bc       	out	0x25, r1	; 37
      c8:	14 bc       	out	0x24, r1	; 36
      ca:	15 bc       	out	0x25, r1	; 37
      cc:	ee e6       	ldi	r30, 0x6E	; 110
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	81 60       	ori	r24, 0x01	; 1
      d4:	80 83       	st	Z, r24
      d6:	15 ba       	out	0x15, r1	; 21
      d8:	08 95       	ret

000000da <__vector_16>:
      da:	1f 92       	push	r1
      dc:	0f 92       	push	r0
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	0f 92       	push	r0
      e2:	11 24       	eor	r1, r1
      e4:	8f 93       	push	r24
      e6:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <refTimer>
      ea:	8f 5f       	subi	r24, 0xFF	; 255
      ec:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <refTimer>
      f0:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <refTimer>
      f4:	81 11       	cpse	r24, r1
      f6:	08 c0       	rjmp	.+16     	; 0x108 <__vector_16+0x2e>
      f8:	15 bc       	out	0x25, r1	; 37
      fa:	e9 98       	cbi	0x1d, 1	; 29
      fc:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <dataFrame>
     100:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <pulseLength+0x1>
     104:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <pulseLength>
     108:	8f 91       	pop	r24
     10a:	0f 90       	pop	r0
     10c:	0f be       	out	0x3f, r0	; 63
     10e:	0f 90       	pop	r0
     110:	1f 90       	pop	r1
     112:	18 95       	reti

00000114 <__vector_11>:
     114:	1f 92       	push	r1
     116:	0f 92       	push	r0
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	0f 92       	push	r0
     11c:	11 24       	eor	r1, r1
     11e:	8f 93       	push	r24
     120:	5b 9a       	sbi	0x0b, 3	; 11
     122:	53 98       	cbi	0x0a, 3	; 10
     124:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     128:	16 bc       	out	0x26, r1	; 38
     12a:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <refTimer>
     12e:	85 b5       	in	r24, 0x25	; 37
     130:	81 60       	ori	r24, 0x01	; 1
     132:	85 bd       	out	0x25, r24	; 37
     134:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <pulseLength+0x1>
     138:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <pulseLength>
     13c:	8c b3       	in	r24, 0x1c	; 28
     13e:	8c bb       	out	0x1c, r24	; 28
     140:	e9 9a       	sbi	0x1d, 1	; 29
     142:	16 ba       	out	0x16, r1	; 22
     144:	44 9a       	sbi	0x08, 4	; 8
     146:	8f 91       	pop	r24
     148:	0f 90       	pop	r0
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	0f 90       	pop	r0
     14e:	1f 90       	pop	r1
     150:	18 95       	reti

00000152 <_Z23CCesc_start_servo_pulsej>:
     152:	9c 01       	movw	r18, r24
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	82 0f       	add	r24, r18
     15a:	93 1f       	adc	r25, r19
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	80 54       	subi	r24, 0x40	; 64
     16a:	92 4a       	sbci	r25, 0xA2	; 162
     16c:	96 95       	lsr	r25
     16e:	87 95       	ror	r24
     170:	96 95       	lsr	r25
     172:	87 95       	ror	r24
     174:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <pulseLength+0x1>
     178:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <pulseLength>
     17c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     180:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     184:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     188:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     18c:	5b 9a       	sbi	0x0b, 3	; 11
     18e:	53 9a       	sbi	0x0a, 3	; 10
     190:	5b 98       	cbi	0x0b, 3	; 11
     192:	89 e0       	ldi	r24, 0x09	; 9
     194:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     198:	08 95       	ret

0000019a <_Z19setupCaptureEscDatav>:
     19a:	e9 e6       	ldi	r30, 0x69	; 105
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	88 60       	ori	r24, 0x08	; 8
     1a2:	80 83       	st	Z, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	8b 7f       	andi	r24, 0xFB	; 251
     1a8:	80 83       	st	Z, r24
     1aa:	ed e6       	ldi	r30, 0x6D	; 109
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	80 83       	st	Z, r24
     1b2:	08 95       	ret

000001b4 <_Z11CCesc_Setuph>:
     1b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numberOfPoles>
     1b8:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z13SetupRefTimerv>
     1bc:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z19setupCaptureEscDatav>
     1c0:	08 95       	ret

000001c2 <_Z16CCesc_GetVoltagev>:
     1c2:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <validVoltage>
     1c6:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <validVoltage+0x1>
     1ca:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <validVoltage+0x2>
     1ce:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <validVoltage+0x3>
     1d2:	08 95       	ret

000001d4 <_Z16CCesc_GetCurrentv>:
     1d4:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <validCurrent>
     1d8:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <validCurrent+0x1>
     1dc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <validCurrent+0x2>
     1e0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <validCurrent+0x3>
     1e4:	08 95       	ret

000001e6 <_Z12CCesc_GetRPMv>:
     1e6:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <validRpm>
     1ea:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <validRpm+0x1>
     1ee:	08 95       	ret

000001f0 <_Z20CCesc_GetTemperaturev>:
     1f0:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <validTemperature>
     1f4:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <validTemperature+0x1>
     1f8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <validTemperature+0x2>
     1fc:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <validTemperature+0x3>
     200:	08 95       	ret

00000202 <__vector_2>:
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	11 24       	eor	r1, r1
     20c:	2f 93       	push	r18
     20e:	3f 93       	push	r19
     210:	8f 93       	push	r24
     212:	9f 93       	push	r25
     214:	15 bc       	out	0x25, r1	; 37
     216:	86 b5       	in	r24, 0x26	; 38
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <pulseLength+0x1>
     21e:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <pulseLength>
     222:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <refTimer>
     226:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <pulseLength>
     22a:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     22e:	89 2f       	mov	r24, r25
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	98 2f       	mov	r25, r24
     234:	88 27       	eor	r24, r24
     236:	82 0f       	add	r24, r18
     238:	93 1f       	adc	r25, r19
     23a:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <pulseLength+0x1>
     23e:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <pulseLength>
     242:	e9 98       	cbi	0x1d, 1	; 29
     244:	9f 91       	pop	r25
     246:	8f 91       	pop	r24
     248:	3f 91       	pop	r19
     24a:	2f 91       	pop	r18
     24c:	0f 90       	pop	r0
     24e:	0f be       	out	0x3f, r0	; 63
     250:	0f 90       	pop	r0
     252:	1f 90       	pop	r1
     254:	18 95       	reti

00000256 <_Z19CCesc_CheckSequencev>:

void CCesc_CheckSequence()
{
     256:	4f 92       	push	r4
     258:	5f 92       	push	r5
     25a:	6f 92       	push	r6
     25c:	7f 92       	push	r7
     25e:	8f 92       	push	r8
     260:	9f 92       	push	r9
     262:	af 92       	push	r10
     264:	bf 92       	push	r11
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	00 d0       	rcall	.+0      	; 0x278 <_Z19CCesc_CheckSequencev+0x22>
     278:	00 d0       	rcall	.+0      	; 0x27a <_Z19CCesc_CheckSequencev+0x24>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62

    static uint32_t temp1;
    static uint32_t temp2;
    
    // if there is no new pulse time don't do anything
    if (pulseLength != 0)
     27e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <pulseLength>
     282:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     286:	89 2b       	or	r24, r25
     288:	09 f4       	brne	.+2      	; 0x28c <_Z19CCesc_CheckSequencev+0x36>
     28a:	98 c2       	rjmp	.+1328   	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
    {
        PinCOutput( PIN_5, HIGH);
     28c:	45 9a       	sbi	0x08, 5	; 8
        dataFrame = (ENUM_FRAMES)((int)dataFrame+1);
     28e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <dataFrame>
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <dataFrame>
        
        switch (dataFrame)
     298:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <dataFrame>
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	09 f4       	brne	.+2      	; 0x2a2 <_Z19CCesc_CheckSequencev+0x4c>
     2a0:	76 c0       	rjmp	.+236    	; 0x38e <_Z19CCesc_CheckSequencev+0x138>
     2a2:	28 f4       	brcc	.+10     	; 0x2ae <_Z19CCesc_CheckSequencev+0x58>
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	69 f0       	breq	.+26     	; 0x2c2 <_Z19CCesc_CheckSequencev+0x6c>
     2a8:	82 30       	cpi	r24, 0x02	; 2
     2aa:	81 f1       	breq	.+96     	; 0x30c <_Z19CCesc_CheckSequencev+0xb6>
     2ac:	82 c2       	rjmp	.+1284   	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     2ae:	8a 30       	cpi	r24, 0x0A	; 10
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <_Z19CCesc_CheckSequencev+0x5e>
     2b2:	17 c1       	rjmp	.+558    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     2b4:	8b 30       	cpi	r24, 0x0B	; 11
     2b6:	09 f4       	brne	.+2      	; 0x2ba <_Z19CCesc_CheckSequencev+0x64>
     2b8:	23 c1       	rjmp	.+582    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     2ba:	87 30       	cpi	r24, 0x07	; 7
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <_Z19CCesc_CheckSequencev+0x6a>
     2be:	79 c2       	rjmp	.+1266   	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     2c0:	a7 c0       	rjmp	.+334    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        {
            case FRAME_REFERENCE:
                // moving average filter on 1ms pulse 
                reference1ms = ((reference1ms * 7) + (pulseLength/8)) /8;
     2c2:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <pulseLength>
     2c6:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     2ca:	9c 01       	movw	r18, r24
     2cc:	36 95       	lsr	r19
     2ce:	27 95       	ror	r18
     2d0:	36 95       	lsr	r19
     2d2:	27 95       	ror	r18
     2d4:	36 95       	lsr	r19
     2d6:	27 95       	ror	r18
     2d8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZZ19CCesc_CheckSequencevE12reference1ms>
     2dc:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_ZZ19CCesc_CheckSequencevE12reference1ms+0x1>
     2e0:	ca 01       	movw	r24, r20
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	84 1b       	sub	r24, r20
     2f0:	95 0b       	sbc	r25, r21
     2f2:	82 0f       	add	r24, r18
     2f4:	93 1f       	adc	r25, r19
     2f6:	96 95       	lsr	r25
     2f8:	87 95       	ror	r24
     2fa:	96 95       	lsr	r25
     2fc:	87 95       	ror	r24
     2fe:	96 95       	lsr	r25
     300:	87 95       	ror	r24
     302:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZZ19CCesc_CheckSequencevE12reference1ms+0x1>
     306:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZZ19CCesc_CheckSequencevE12reference1ms>
                break;
     30a:	53 c2       	rjmp	.+1190   	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
            case FRAME_VOLTAGE:
                //result is mV
                voltage = det_value( (reference1ms/2)*8, pulseLength ) * 20000L / reference1ms/8;                
     30c:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <pulseLength>
     310:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     314:	a9 01       	movw	r20, r18
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <_ZZ19CCesc_CheckSequencevE12reference1ms>
     31e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <_ZZ19CCesc_CheckSequencevE12reference1ms+0x1>
     322:	cf 01       	movw	r24, r30
     324:	96 95       	lsr	r25
     326:	87 95       	ror	r24
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	a0 e0       	ldi	r26, 0x00	; 0
     336:	b0 e0       	ldi	r27, 0x00	; 0

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;

    if (value > offset0_5)
     338:	84 17       	cp	r24, r20
     33a:	95 07       	cpc	r25, r21
     33c:	a6 07       	cpc	r26, r22
     33e:	b7 07       	cpc	r27, r23
     340:	38 f4       	brcc	.+14     	; 0x350 <_Z19CCesc_CheckSequencev+0xfa>
        new_value = value - offset0_5;
     342:	9a 01       	movw	r18, r20
     344:	ab 01       	movw	r20, r22
     346:	28 1b       	sub	r18, r24
     348:	39 0b       	sbc	r19, r25
     34a:	4a 0b       	sbc	r20, r26
     34c:	5b 0b       	sbc	r21, r27
     34e:	03 c0       	rjmp	.+6      	; 0x356 <_Z19CCesc_CheckSequencev+0x100>
    EIMSK &= ~(0x02); // disable int1 interrupt    
}

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	a9 01       	movw	r20, r18
                // moving average filter on 1ms pulse 
                reference1ms = ((reference1ms * 7) + (pulseLength/8)) /8;
                break;
            case FRAME_VOLTAGE:
                //result is mV
                voltage = det_value( (reference1ms/2)*8, pulseLength ) * 20000L / reference1ms/8;                
     356:	a0 e2       	ldi	r26, 0x20	; 32
     358:	be e4       	ldi	r27, 0x4E	; 78
     35a:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
     35e:	9f 01       	movw	r18, r30
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     368:	da 01       	movw	r26, r20
     36a:	c9 01       	movw	r24, r18
     36c:	68 94       	set
     36e:	12 f8       	bld	r1, 2
     370:	b6 95       	lsr	r27
     372:	a7 95       	ror	r26
     374:	97 95       	ror	r25
     376:	87 95       	ror	r24
     378:	16 94       	lsr	r1
     37a:	d1 f7       	brne	.-12     	; 0x370 <_Z19CCesc_CheckSequencev+0x11a>
     37c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <_ZZ19CCesc_CheckSequencevE7voltage>
     380:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <_ZZ19CCesc_CheckSequencevE7voltage+0x1>
     384:	a0 93 f0 01 	sts	0x01F0, r26	; 0x8001f0 <_ZZ19CCesc_CheckSequencevE7voltage+0x2>
     388:	b0 93 f1 01 	sts	0x01F1, r27	; 0x8001f1 <_ZZ19CCesc_CheckSequencevE7voltage+0x3>
                break;
     38c:	12 c2       	rjmp	.+1060   	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
            case FRAME_CURRENT:
                // result is mA
                current = det_value( (reference1ms/2)*8, pulseLength ) * 50000L / reference1ms/8 ;                
     38e:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <pulseLength>
     392:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     396:	a9 01       	movw	r20, r18
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <_ZZ19CCesc_CheckSequencevE12reference1ms>
     3a0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <_ZZ19CCesc_CheckSequencevE12reference1ms+0x1>
     3a4:	cf 01       	movw	r24, r30
     3a6:	96 95       	lsr	r25
     3a8:	87 95       	ror	r24
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	a0 e0       	ldi	r26, 0x00	; 0
     3b8:	b0 e0       	ldi	r27, 0x00	; 0

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;

    if (value > offset0_5)
     3ba:	84 17       	cp	r24, r20
     3bc:	95 07       	cpc	r25, r21
     3be:	a6 07       	cpc	r26, r22
     3c0:	b7 07       	cpc	r27, r23
     3c2:	38 f4       	brcc	.+14     	; 0x3d2 <_Z19CCesc_CheckSequencev+0x17c>
        new_value = value - offset0_5;
     3c4:	9a 01       	movw	r18, r20
     3c6:	ab 01       	movw	r20, r22
     3c8:	28 1b       	sub	r18, r24
     3ca:	39 0b       	sbc	r19, r25
     3cc:	4a 0b       	sbc	r20, r26
     3ce:	5b 0b       	sbc	r21, r27
     3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <_Z19CCesc_CheckSequencev+0x182>
    EIMSK &= ~(0x02); // disable int1 interrupt    
}

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	a9 01       	movw	r20, r18
                //result is mV
                voltage = det_value( (reference1ms/2)*8, pulseLength ) * 20000L / reference1ms/8;                
                break;
            case FRAME_CURRENT:
                // result is mA
                current = det_value( (reference1ms/2)*8, pulseLength ) * 50000L / reference1ms/8 ;                
     3d8:	a0 e5       	ldi	r26, 0x50	; 80
     3da:	b3 ec       	ldi	r27, 0xC3	; 195
     3dc:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
     3e0:	9f 01       	movw	r18, r30
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	68 94       	set
     3f0:	12 f8       	bld	r1, 2
     3f2:	b6 95       	lsr	r27
     3f4:	a7 95       	ror	r26
     3f6:	97 95       	ror	r25
     3f8:	87 95       	ror	r24
     3fa:	16 94       	lsr	r1
     3fc:	d1 f7       	brne	.-12     	; 0x3f2 <_Z19CCesc_CheckSequencev+0x19c>
     3fe:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <_ZZ19CCesc_CheckSequencevE7current>
     402:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <_ZZ19CCesc_CheckSequencevE7current+0x1>
     406:	a0 93 ec 01 	sts	0x01EC, r26	; 0x8001ec <_ZZ19CCesc_CheckSequencevE7current+0x2>
     40a:	b0 93 ed 01 	sts	0x01ED, r27	; 0x8001ed <_ZZ19CCesc_CheckSequencevE7current+0x3>
                break;
     40e:	d1 c1       	rjmp	.+930    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
            case FRAME_RPM:                
                if ((pulseLength/8) > (offset0_5+10) )
     410:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <pulseLength>
     414:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     418:	36 95       	lsr	r19
     41a:	27 95       	ror	r18
     41c:	36 95       	lsr	r19
     41e:	27 95       	ror	r18
     420:	36 95       	lsr	r19
     422:	27 95       	ror	r18
     424:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     428:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     42c:	0a 96       	adiw	r24, 0x0a	; 10
     42e:	82 17       	cp	r24, r18
     430:	93 07       	cpc	r25, r19
     432:	08 f0       	brcs	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	4d c0       	rjmp	.+154    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
                {
                    rpm = ((det_value((reference1ms/2)*8, pulseLength) * 20417) / reference1ms / (numberOfPoles/2)/8) ;   
     436:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <pulseLength>
     43a:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     43e:	a9 01       	movw	r20, r18
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <_ZZ19CCesc_CheckSequencevE12reference1ms>
     448:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <_ZZ19CCesc_CheckSequencevE12reference1ms+0x1>
     44c:	cf 01       	movw	r24, r30
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	a0 e0       	ldi	r26, 0x00	; 0
     460:	b0 e0       	ldi	r27, 0x00	; 0

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;

    if (value > offset0_5)
     462:	84 17       	cp	r24, r20
     464:	95 07       	cpc	r25, r21
     466:	a6 07       	cpc	r26, r22
     468:	b7 07       	cpc	r27, r23
     46a:	38 f4       	brcc	.+14     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
        new_value = value - offset0_5;
     46c:	9a 01       	movw	r18, r20
     46e:	ab 01       	movw	r20, r22
     470:	28 1b       	sub	r18, r24
     472:	39 0b       	sbc	r19, r25
     474:	4a 0b       	sbc	r20, r26
     476:	5b 0b       	sbc	r21, r27
     478:	03 c0       	rjmp	.+6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
    EIMSK &= ~(0x02); // disable int1 interrupt    
}

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	a9 01       	movw	r20, r18
                current = det_value( (reference1ms/2)*8, pulseLength ) * 50000L / reference1ms/8 ;                
                break;
            case FRAME_RPM:                
                if ((pulseLength/8) > (offset0_5+10) )
                {
                    rpm = ((det_value((reference1ms/2)*8, pulseLength) * 20417) / reference1ms / (numberOfPoles/2)/8) ;   
     480:	a1 ec       	ldi	r26, 0xC1	; 193
     482:	bf e4       	ldi	r27, 0x4F	; 79
     484:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
     488:	9f 01       	movw	r18, r30
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     492:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <numberOfPoles>
     496:	c6 94       	lsr	r12
     498:	d1 2c       	mov	r13, r1
     49a:	e1 2c       	mov	r14, r1
     49c:	f1 2c       	mov	r15, r1
     49e:	ca 01       	movw	r24, r20
     4a0:	b9 01       	movw	r22, r18
     4a2:	a7 01       	movw	r20, r14
     4a4:	96 01       	movw	r18, r12
     4a6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     4aa:	da 01       	movw	r26, r20
     4ac:	c9 01       	movw	r24, r18
     4ae:	68 94       	set
     4b0:	12 f8       	bld	r1, 2
     4b2:	b6 95       	lsr	r27
     4b4:	a7 95       	ror	r26
     4b6:	97 95       	ror	r25
     4b8:	87 95       	ror	r24
     4ba:	16 94       	lsr	r1
     4bc:	d1 f7       	brne	.-12     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4be:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <_ZZ19CCesc_CheckSequencevE3rpm>
     4c2:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <_ZZ19CCesc_CheckSequencevE3rpm+0x1>
     4c6:	a0 93 e8 01 	sts	0x01E8, r26	; 0x8001e8 <_ZZ19CCesc_CheckSequencevE3rpm+0x2>
     4ca:	b0 93 e9 01 	sts	0x01E9, r27	; 0x8001e9 <_ZZ19CCesc_CheckSequencevE3rpm+0x3>
     4ce:	71 c1       	rjmp	.+738    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
                }
                else
                {               
                    rpm = 0;
     4d0:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <_ZZ19CCesc_CheckSequencevE3rpm>
     4d4:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <_ZZ19CCesc_CheckSequencevE3rpm+0x1>
     4d8:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <_ZZ19CCesc_CheckSequencevE3rpm+0x2>
     4dc:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <_ZZ19CCesc_CheckSequencevE3rpm+0x3>
     4e0:	68 c1       	rjmp	.+720    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
                }                     
                break;
            case FRAME_TEMP1:
                temp1 = pulseLength;
     4e2:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <pulseLength>
     4e6:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_ZZ19CCesc_CheckSequencevE5temp1>
     4f2:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_ZZ19CCesc_CheckSequencevE5temp1+0x1>
     4f6:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <_ZZ19CCesc_CheckSequencevE5temp1+0x2>
     4fa:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <_ZZ19CCesc_CheckSequencevE5temp1+0x3>
                break;
     4fe:	59 c1       	rjmp	.+690    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
            case FRAME_TEMP2:
                temp2 = pulseLength;
     500:	80 90 f2 01 	lds	r8, 0x01F2	; 0x8001f2 <pulseLength>
     504:	90 90 f3 01 	lds	r9, 0x01F3	; 0x8001f3 <pulseLength+0x1>
     508:	a1 2c       	mov	r10, r1
     50a:	b1 2c       	mov	r11, r1
     50c:	80 92 de 01 	sts	0x01DE, r8	; 0x8001de <_ZZ19CCesc_CheckSequencevE5temp2>
     510:	90 92 df 01 	sts	0x01DF, r9	; 0x8001df <_ZZ19CCesc_CheckSequencevE5temp2+0x1>
     514:	a0 92 e0 01 	sts	0x01E0, r10	; 0x8001e0 <_ZZ19CCesc_CheckSequencevE5temp2+0x2>
     518:	b0 92 e1 01 	sts	0x01E1, r11	; 0x8001e1 <_ZZ19CCesc_CheckSequencevE5temp2+0x3>
                // -- "Temperature is measured in one of two ways, and embedded temp sensor or an external
                // -- NTC resistor. Only one of these two data fields will have valid data (greater than 0.5ms).
                // -- If the controller is NTC type, logarithmic math is required to do the conversion."
                // We are not going to calculate logarithmic here. Instead, we gonna use a loo table
                // with pre-calculated temperatures, interpolating the in-between values.
                if (temp1 > temp2)
     51c:	c0 90 e2 01 	lds	r12, 0x01E2	; 0x8001e2 <_ZZ19CCesc_CheckSequencevE5temp1>
     520:	d0 90 e3 01 	lds	r13, 0x01E3	; 0x8001e3 <_ZZ19CCesc_CheckSequencevE5temp1+0x1>
     524:	e0 90 e4 01 	lds	r14, 0x01E4	; 0x8001e4 <_ZZ19CCesc_CheckSequencevE5temp1+0x2>
     528:	f0 90 e5 01 	lds	r15, 0x01E5	; 0x8001e5 <_ZZ19CCesc_CheckSequencevE5temp1+0x3>
     52c:	8c 14       	cp	r8, r12
     52e:	9d 04       	cpc	r9, r13
     530:	ae 04       	cpc	r10, r14
     532:	bf 04       	cpc	r11, r15
     534:	08 f0       	brcs	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     536:	54 c0       	rjmp	.+168    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
                {
                    temperature = det_value( offset0_5, temp1/8 ) * 30000L / reference1ms;
     538:	68 94       	set
     53a:	12 f8       	bld	r1, 2
     53c:	f6 94       	lsr	r15
     53e:	e7 94       	ror	r14
     540:	d7 94       	ror	r13
     542:	c7 94       	ror	r12
     544:	16 94       	lsr	r1
     546:	d1 f7       	brne	.-12     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     548:	60 90 00 01 	lds	r6, 0x0100	; 0x800100 <__data_start>
     54c:	70 90 01 01 	lds	r7, 0x0101	; 0x800101 <__data_start+0x1>
     550:	c3 01       	movw	r24, r6
     552:	a0 e0       	ldi	r26, 0x00	; 0
     554:	b0 e0       	ldi	r27, 0x00	; 0

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;

    if (value > offset0_5)
     556:	8c 15       	cp	r24, r12
     558:	9d 05       	cpc	r25, r13
     55a:	ae 05       	cpc	r26, r14
     55c:	bf 05       	cpc	r27, r15
     55e:	38 f4       	brcc	.+14     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
        new_value = value - offset0_5;
     560:	a7 01       	movw	r20, r14
     562:	96 01       	movw	r18, r12
     564:	28 1b       	sub	r18, r24
     566:	39 0b       	sbc	r19, r25
     568:	4a 0b       	sbc	r20, r26
     56a:	5b 0b       	sbc	r21, r27
     56c:	03 c0       	rjmp	.+6      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
    EIMSK &= ~(0x02); // disable int1 interrupt    
}

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	a9 01       	movw	r20, r18
                // -- If the controller is NTC type, logarithmic math is required to do the conversion."
                // We are not going to calculate logarithmic here. Instead, we gonna use a loo table
                // with pre-calculated temperatures, interpolating the in-between values.
                if (temp1 > temp2)
                {
                    temperature = det_value( offset0_5, temp1/8 ) * 30000L / reference1ms;
     574:	a0 e3       	ldi	r26, 0x30	; 48
     576:	b5 e7       	ldi	r27, 0x75	; 117
     578:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
     57c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_ZZ19CCesc_CheckSequencevE12reference1ms>
     580:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_ZZ19CCesc_CheckSequencevE12reference1ms+0x1>
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     58c:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <__data_end>
     590:	30 93 db 01 	sts	0x01DB, r19	; 0x8001db <__data_end+0x1>
     594:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <__data_end+0x2>
     598:	50 93 dd 01 	sts	0x01DD, r21	; 0x8001dd <__data_end+0x3>
                    // save new offset
                    
                   offset0_5 = (((offset0_5 * 7) + (temp2/8)) /8);                   
     59c:	68 94       	set
     59e:	12 f8       	bld	r1, 2
     5a0:	b6 94       	lsr	r11
     5a2:	a7 94       	ror	r10
     5a4:	97 94       	ror	r9
     5a6:	87 94       	ror	r8
     5a8:	16 94       	lsr	r1
     5aa:	d1 f7       	brne	.-12     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5ac:	c3 01       	movw	r24, r6
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	86 19       	sub	r24, r6
     5bc:	97 09       	sbc	r25, r7
     5be:	88 0e       	add	r8, r24
     5c0:	99 1e       	adc	r9, r25
     5c2:	a1 1c       	adc	r10, r1
     5c4:	b1 1c       	adc	r11, r1
     5c6:	68 94       	set
     5c8:	12 f8       	bld	r1, 2
     5ca:	b6 94       	lsr	r11
     5cc:	a7 94       	ror	r10
     5ce:	97 94       	ror	r9
     5d0:	87 94       	ror	r8
     5d2:	16 94       	lsr	r1
     5d4:	d1 f7       	brne	.-12     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5d6:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__data_start+0x1>
     5da:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__data_start>
     5de:	a3 c0       	rjmp	.+326    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
                }
                else
                {
                    uint32_t temp = (det_value( offset0_5, temp2/8 ) * 1000) / reference1ms;
     5e0:	68 94       	set
     5e2:	12 f8       	bld	r1, 2
     5e4:	b6 94       	lsr	r11
     5e6:	a7 94       	ror	r10
     5e8:	97 94       	ror	r9
     5ea:	87 94       	ror	r8
     5ec:	16 94       	lsr	r1
     5ee:	d1 f7       	brne	.-12     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5f0:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
     5f4:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
     5f8:	c8 01       	movw	r24, r16
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;

    if (value > offset0_5)
     5fe:	88 15       	cp	r24, r8
     600:	99 05       	cpc	r25, r9
     602:	aa 05       	cpc	r26, r10
     604:	bb 05       	cpc	r27, r11
     606:	38 f4       	brcc	.+14     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
        new_value = value - offset0_5;
     608:	a5 01       	movw	r20, r10
     60a:	94 01       	movw	r18, r8
     60c:	28 1b       	sub	r18, r24
     60e:	39 0b       	sbc	r19, r25
     610:	4a 0b       	sbc	r20, r26
     612:	5b 0b       	sbc	r21, r27
     614:	03 c0       	rjmp	.+6      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
    EIMSK &= ~(0x02); // disable int1 interrupt    
}

uint32_t det_value( uint32_t offset0_5,  uint32_t value)
{
    uint32_t new_value = 0;
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	a9 01       	movw	r20, r18
                    
                   offset0_5 = (((offset0_5 * 7) + (temp2/8)) /8);                   
                }
                else
                {
                    uint32_t temp = (det_value( offset0_5, temp2/8 ) * 1000) / reference1ms;
     61c:	a8 ee       	ldi	r26, 0xE8	; 232
     61e:	b3 e0       	ldi	r27, 0x03	; 3
     620:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
     624:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_ZZ19CCesc_CheckSequencevE12reference1ms>
     628:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_ZZ19CCesc_CheckSequencevE12reference1ms+0x1>
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     634:	29 83       	std	Y+1, r18	; 0x01
     636:	3a 83       	std	Y+2, r19	; 0x02
     638:	4b 83       	std	Y+3, r20	; 0x03
     63a:	5c 83       	std	Y+4, r21	; 0x04
                    uint8_t  index = (temp / TEMP_NTC_SUB_INDEX) - 1;
     63c:	ca 01       	movw	r24, r20
     63e:	b9 01       	movw	r22, r18
     640:	24 e6       	ldi	r18, 0x64	; 100
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     64c:	21 50       	subi	r18, 0x01	; 1
                    int      rest = temp % TEMP_NTC_SUB_INDEX;

                    if (index >= 0 && index < (sizeof(tempNtc) / sizeof(int32_t)))
     64e:	26 32       	cpi	r18, 0x26	; 38
     650:	08 f0       	brcs	.+2      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     652:	40 c0       	rjmp	.+128    	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
                    {
                        int32_t tempAbove = tempNtc[index];
     654:	82 2f       	mov	r24, r18
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	eb 5f       	subi	r30, 0xFB	; 251
     664:	fe 4f       	sbci	r31, 0xFE	; 254
     666:	80 80       	ld	r8, Z
     668:	91 80       	ldd	r9, Z+1	; 0x01
     66a:	a2 80       	ldd	r10, Z+2	; 0x02
     66c:	b3 80       	ldd	r11, Z+3	; 0x03
                        int32_t tempBelow = tempNtc[index + 1];
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	fc 01       	movw	r30, r24
     678:	e7 5f       	subi	r30, 0xF7	; 247
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
                        temperature = tempAbove + (((tempBelow - tempAbove ) * rest) / TEMP_NTC_SUB_INDEX );                        
     67c:	40 80       	ld	r4, Z
     67e:	51 80       	ldd	r5, Z+1	; 0x01
     680:	62 80       	ldd	r6, Z+2	; 0x02
     682:	73 80       	ldd	r7, Z+3	; 0x03
     684:	48 18       	sub	r4, r8
     686:	59 08       	sbc	r5, r9
     688:	6a 08       	sbc	r6, r10
     68a:	7b 08       	sbc	r7, r11
                }
                else
                {
                    uint32_t temp = (det_value( offset0_5, temp2/8 ) * 1000) / reference1ms;
                    uint8_t  index = (temp / TEMP_NTC_SUB_INDEX) - 1;
                    int      rest = temp % TEMP_NTC_SUB_INDEX;
     68c:	69 81       	ldd	r22, Y+1	; 0x01
     68e:	7a 81       	ldd	r23, Y+2	; 0x02
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	9c 81       	ldd	r25, Y+4	; 0x04
     694:	24 e6       	ldi	r18, 0x64	; 100
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>

                    if (index >= 0 && index < (sizeof(tempNtc) / sizeof(int32_t)))
                    {
                        int32_t tempAbove = tempNtc[index];
                        int32_t tempBelow = tempNtc[index + 1];
                        temperature = tempAbove + (((tempBelow - tempAbove ) * rest) / TEMP_NTC_SUB_INDEX );                        
     6a0:	db 01       	movw	r26, r22
     6a2:	a3 01       	movw	r20, r6
     6a4:	92 01       	movw	r18, r4
     6a6:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulshisi3>
     6aa:	24 e6       	ldi	r18, 0x64	; 100
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	0e 94 09 0b 	call	0x1612	; 0x1612 <__divmodsi4>
     6b6:	da 01       	movw	r26, r20
     6b8:	c9 01       	movw	r24, r18
     6ba:	88 0d       	add	r24, r8
     6bc:	99 1d       	adc	r25, r9
     6be:	aa 1d       	adc	r26, r10
     6c0:	bb 1d       	adc	r27, r11
     6c2:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
     6c6:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__data_end+0x1>
     6ca:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <__data_end+0x2>
     6ce:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <__data_end+0x3>
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
                    }
                    else
                    {
                        temperature = 0;
     6d4:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
     6d8:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <__data_end+0x1>
     6dc:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <__data_end+0x2>
     6e0:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <__data_end+0x3>
                    }                     
                    // save new offset, with moving average filter                    
                    offset0_5 = ((offset0_5 * 7) + (temp1/8)) /8;
     6e4:	c8 01       	movw	r24, r16
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	80 1b       	sub	r24, r16
     6f4:	91 0b       	sbc	r25, r17
     6f6:	68 94       	set
     6f8:	12 f8       	bld	r1, 2
     6fa:	f6 94       	lsr	r15
     6fc:	e7 94       	ror	r14
     6fe:	d7 94       	ror	r13
     700:	c7 94       	ror	r12
     702:	16 94       	lsr	r1
     704:	d1 f7       	brne	.-12     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     706:	c8 0e       	add	r12, r24
     708:	d9 1e       	adc	r13, r25
     70a:	e1 1c       	adc	r14, r1
     70c:	f1 1c       	adc	r15, r1
     70e:	68 94       	set
     710:	12 f8       	bld	r1, 2
     712:	f6 94       	lsr	r15
     714:	e7 94       	ror	r14
     716:	d7 94       	ror	r13
     718:	c7 94       	ror	r12
     71a:	16 94       	lsr	r1
     71c:	d1 f7       	brne	.-12     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     71e:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
     722:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
                }                
                
                // Data is valid so copy to telemetry data 
                validVoltage = voltage;
     726:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <_ZZ19CCesc_CheckSequencevE7voltage>
     72a:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <_ZZ19CCesc_CheckSequencevE7voltage+0x1>
     72e:	a0 91 f0 01 	lds	r26, 0x01F0	; 0x8001f0 <_ZZ19CCesc_CheckSequencevE7voltage+0x2>
     732:	b0 91 f1 01 	lds	r27, 0x01F1	; 0x8001f1 <_ZZ19CCesc_CheckSequencevE7voltage+0x3>
     736:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <validVoltage>
     73a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <validVoltage+0x1>
     73e:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <validVoltage+0x2>
     742:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <validVoltage+0x3>
                validCurrent = current;
     746:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_ZZ19CCesc_CheckSequencevE7current>
     74a:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <_ZZ19CCesc_CheckSequencevE7current+0x1>
     74e:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <_ZZ19CCesc_CheckSequencevE7current+0x2>
     752:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <_ZZ19CCesc_CheckSequencevE7current+0x3>
     756:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <validCurrent>
     75a:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <validCurrent+0x1>
     75e:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <validCurrent+0x2>
     762:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <validCurrent+0x3>
                validRpm = rpm;
     766:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <_ZZ19CCesc_CheckSequencevE3rpm>
     76a:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <_ZZ19CCesc_CheckSequencevE3rpm+0x1>
     76e:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <_ZZ19CCesc_CheckSequencevE3rpm+0x2>
     772:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <_ZZ19CCesc_CheckSequencevE3rpm+0x3>
     776:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <validRpm>
     77a:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <validRpm+0x1>
     77e:	a0 93 fc 01 	sts	0x01FC, r26	; 0x8001fc <validRpm+0x2>
     782:	b0 93 fd 01 	sts	0x01FD, r27	; 0x8001fd <validRpm+0x3>
                validTemperature = temperature/1000;               
     786:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <__data_end>
     78a:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <__data_end+0x1>
     78e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <__data_end+0x2>
     792:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <__data_end+0x3>
     796:	28 ee       	ldi	r18, 0xE8	; 232
     798:	33 e0       	ldi	r19, 0x03	; 3
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	0e 94 09 0b 	call	0x1612	; 0x1612 <__divmodsi4>
     7a2:	20 93 f6 01 	sts	0x01F6, r18	; 0x8001f6 <validTemperature>
     7a6:	30 93 f7 01 	sts	0x01F7, r19	; 0x8001f7 <validTemperature+0x1>
     7aa:	40 93 f8 01 	sts	0x01F8, r20	; 0x8001f8 <validTemperature+0x2>
     7ae:	50 93 f9 01 	sts	0x01F9, r21	; 0x8001f9 <validTemperature+0x3>
                break;
            default:
                break;
        }
        pulseLength = 0;
     7b2:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <pulseLength+0x1>
     7b6:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <pulseLength>
        PinCOutput( PIN_5, LOW);
     7ba:	45 98       	cbi	0x08, 5	; 8
    }
    
}
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	9f 90       	pop	r9
     7da:	8f 90       	pop	r8
     7dc:	7f 90       	pop	r7
     7de:	6f 90       	pop	r6
     7e0:	5f 90       	pop	r5
     7e2:	4f 90       	pop	r4
     7e4:	08 95       	ret

000007e6 <_Z12crc_add_bytehh>:
static const unsigned char H[16]={0x00,0x9d,0x23,0xbe,0x46,0xdb,0x65,0xf8,0x8c,0x11,0xaf,0x32,0xca,0x57,0xe9,0x74};

uint8_t crc_add_byte(uint8_t crc, uint8_t crc_data)
{
   uint8_t i;
   i = (crc_data ^ crc) ;
     7e6:	86 27       	eor	r24, r22
   crc = L[i&0x0F]^H[i>>4];
     7e8:	a8 2f       	mov	r26, r24
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	b5 95       	asr	r27
     7ee:	a7 95       	ror	r26
     7f0:	b5 95       	asr	r27
     7f2:	a7 95       	ror	r26
     7f4:	b5 95       	asr	r27
     7f6:	a7 95       	ror	r26
     7f8:	b5 95       	asr	r27
     7fa:	a7 95       	ror	r26
     7fc:	a7 54       	subi	r26, 0x47	; 71
     7fe:	be 4f       	sbci	r27, 0xFE	; 254
     800:	8f 70       	andi	r24, 0x0F	; 15
     802:	e8 2f       	mov	r30, r24
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	e7 53       	subi	r30, 0x37	; 55
     808:	fe 4f       	sbci	r31, 0xFE	; 254
     80a:	9c 91       	ld	r25, X
     80c:	80 81       	ld	r24, Z
   return crc;
}
     80e:	89 27       	eor	r24, r25
     810:	08 95       	ret

00000812 <_Z7crc_calPhh>:

uint8_t crc_cal( uint8_t data[], uint8_t size)
{
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
   uint8_t crc = 0;
   
   for (uint8_t i=0; i < size; i++)
     81a:	66 23       	and	r22, r22
     81c:	81 f0       	breq	.+32     	; 0x83e <_Z7crc_calPhh+0x2c>
     81e:	ec 01       	movw	r28, r24
     820:	61 50       	subi	r22, 0x01	; 1
     822:	06 2f       	mov	r16, r22
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	0f 5f       	subi	r16, 0xFF	; 255
     828:	1f 4f       	sbci	r17, 0xFF	; 255
     82a:	08 0f       	add	r16, r24
     82c:	19 1f       	adc	r17, r25
     82e:	80 e0       	ldi	r24, 0x00	; 0
   {
      crc = crc_add_byte(crc, data[i]);
     830:	69 91       	ld	r22, Y+
     832:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_Z12crc_add_bytehh>

uint8_t crc_cal( uint8_t data[], uint8_t size)
{
   uint8_t crc = 0;
   
   for (uint8_t i=0; i < size; i++)
     836:	c0 17       	cp	r28, r16
     838:	d1 07       	cpc	r29, r17
     83a:	d1 f7       	brne	.-12     	; 0x830 <_Z7crc_calPhh+0x1e>
     83c:	01 c0       	rjmp	.+2      	; 0x840 <_Z7crc_calPhh+0x2e>
   return crc;
}

uint8_t crc_cal( uint8_t data[], uint8_t size)
{
   uint8_t crc = 0;
     83e:	80 e0       	ldi	r24, 0x00	; 0
   {
      crc = crc_add_byte(crc, data[i]);
   }
   
   return crc;
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <_Z14store_settingsv>:

static SETTINGS settings;

void store_settings()
{ 
   settings.crc = 0xBB;
     84a:	8b eb       	ldi	r24, 0xBB	; 187
     84c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_ZL8settings+0x6>
   eeprom_write_block((const void*)&settings.crc, (void*)&EEcrc, sizeof(uint8_t));
     850:	41 e0       	ldi	r20, 0x01	; 1
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	66 e0       	ldi	r22, 0x06	; 6
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	8c e0       	ldi	r24, 0x0C	; 12
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <eeprom_write_block>
   eeprom_write_block((const void*)&settings.CurrentPort, (void*)&EECurrentPort, sizeof(uint8_t));
     860:	41 e0       	ldi	r20, 0x01	; 1
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	65 e0       	ldi	r22, 0x05	; 5
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	86 e0       	ldi	r24, 0x06	; 6
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <eeprom_write_block>
   eeprom_write_block((const void*)&settings.RPMPort, (void*)&EERPMPort, sizeof(uint8_t));
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	64 e0       	ldi	r22, 0x04	; 4
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	87 e0       	ldi	r24, 0x07	; 7
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <eeprom_write_block>
   eeprom_write_block((const void*)&settings.ErrorPort, (void*)&EEErrorPort, sizeof(uint8_t));
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	63 e0       	ldi	r22, 0x03	; 3
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	88 e0       	ldi	r24, 0x08	; 8
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <eeprom_write_block>
   eeprom_write_block((const void*)&settings.TempraturePort, (void*)&EETempraturePort, sizeof(uint8_t));
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	62 e0       	ldi	r22, 0x02	; 2
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	89 e0       	ldi	r24, 0x09	; 9
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <eeprom_write_block>
   eeprom_write_block((const void*)&settings.NumberofPools, (void*)&EENumberofPools, sizeof(uint8_t));
     8a0:	41 e0       	ldi	r20, 0x01	; 1
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	8a e0       	ldi	r24, 0x0A	; 10
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <eeprom_write_block>
   eeprom_write_block((const void*)&settings.CurrentCal, (void*)&EECurrentCal, sizeof(uint8_t));
     8b0:	41 e0       	ldi	r20, 0x01	; 1
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	8b e0       	ldi	r24, 0x0B	; 11
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <eeprom_write_block>
     8c0:	08 95       	ret

000008c2 <_Z13load_settingsv>:
}

void load_settings()
{
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
   
   settings.crc               = eeprom_read_byte(&EEcrc);
     8c6:	86 e0       	ldi	r24, 0x06	; 6
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <eeprom_read_byte>
     8ce:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_ZL8settings+0x6>
   if (settings.crc == 0xBB)
     8d2:	8b 3b       	cpi	r24, 0xBB	; 187
     8d4:	09 f5       	brne	.+66     	; 0x918 <__stack+0x19>
   {
      settings.CurrentPort    = eeprom_read_byte(&EECurrentPort);
     8d6:	85 e0       	ldi	r24, 0x05	; 5
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <eeprom_read_byte>
     8de:	c6 e0       	ldi	r28, 0x06	; 6
     8e0:	d2 e0       	ldi	r29, 0x02	; 2
     8e2:	88 83       	st	Y, r24
      settings.RPMPort        = eeprom_read_byte(&EERPMPort);
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <eeprom_read_byte>
     8ec:	89 83       	std	Y+1, r24	; 0x01
      settings.ErrorPort      = eeprom_read_byte(&EEErrorPort);
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <eeprom_read_byte>
     8f6:	8a 83       	std	Y+2, r24	; 0x02
      settings.TempraturePort = eeprom_read_byte(&EETempraturePort);
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <eeprom_read_byte>
     900:	8b 83       	std	Y+3, r24	; 0x03
      settings.NumberofPools  = eeprom_read_byte(&EENumberofPools);
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <eeprom_read_byte>
     90a:	8c 83       	std	Y+4, r24	; 0x04
	  settings.CurrentCal     = eeprom_read_byte(&EECurrentCal);
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <eeprom_read_byte>
     914:	8d 83       	std	Y+5, r24	; 0x05
     916:	0e c0       	rjmp	.+28     	; 0x934 <__stack+0x35>
   }
   else
   {
      settings.CurrentPort    = 4;
     918:	e6 e0       	ldi	r30, 0x06	; 6
     91a:	f2 e0       	ldi	r31, 0x02	; 2
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	80 83       	st	Z, r24
      settings.RPMPort        = 11;
     920:	8b e0       	ldi	r24, 0x0B	; 11
     922:	81 83       	std	Z+1, r24	; 0x01
      settings.ErrorPort      = 10;
     924:	8a e0       	ldi	r24, 0x0A	; 10
     926:	82 83       	std	Z+2, r24	; 0x02
      settings.TempraturePort = 15;
     928:	8f e0       	ldi	r24, 0x0F	; 15
     92a:	83 83       	std	Z+3, r24	; 0x03
      settings.NumberofPools  = 14;
     92c:	8e e0       	ldi	r24, 0x0E	; 14
     92e:	84 83       	std	Z+4, r24	; 0x04
	  settings.CurrentCal     = 100;
     930:	84 e6       	ldi	r24, 0x64	; 100
     932:	85 83       	std	Z+5, r24	; 0x05
   }
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <_Z12doSettingGetP14COMMAND_STRUCT>:

bool doSettingGet(COMMAND_STRUCT *command)
{
     93a:	fc 01       	movw	r30, r24
   bool result = false;
   //C2
   switch (command->command2)
     93c:	93 81       	ldd	r25, Z+3	; 0x03
     93e:	93 32       	cpi	r25, 0x23	; 35
     940:	11 f1       	breq	.+68     	; 0x986 <_Z12doSettingGetP14COMMAND_STRUCT+0x4c>
     942:	28 f4       	brcc	.+10     	; 0x94e <_Z12doSettingGetP14COMMAND_STRUCT+0x14>
     944:	91 32       	cpi	r25, 0x21	; 33
     946:	49 f0       	breq	.+18     	; 0x95a <_Z12doSettingGetP14COMMAND_STRUCT+0x20>
     948:	92 32       	cpi	r25, 0x22	; 34
     94a:	91 f0       	breq	.+36     	; 0x970 <_Z12doSettingGetP14COMMAND_STRUCT+0x36>
     94c:	48 c0       	rjmp	.+144    	; 0x9de <_Z12doSettingGetP14COMMAND_STRUCT+0xa4>
     94e:	95 32       	cpi	r25, 0x25	; 37
     950:	81 f1       	breq	.+96     	; 0x9b2 <_Z12doSettingGetP14COMMAND_STRUCT+0x78>
     952:	20 f1       	brcs	.+72     	; 0x99c <_Z12doSettingGetP14COMMAND_STRUCT+0x62>
     954:	91 33       	cpi	r25, 0x31	; 49
     956:	c1 f1       	breq	.+112    	; 0x9c8 <_Z12doSettingGetP14COMMAND_STRUCT+0x8e>
     958:	42 c0       	rjmp	.+132    	; 0x9de <_Z12doSettingGetP14COMMAND_STRUCT+0xa4>
   {
      case C2_CURRENT_PORT:  
         command->data = settings.CurrentPort;
     95a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZL8settings>
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	84 83       	std	Z+4, r24	; 0x04
     966:	95 83       	std	Z+5, r25	; 0x05
     968:	a6 83       	std	Z+6, r26	; 0x06
     96a:	b7 83       	std	Z+7, r27	; 0x07
         result = true;
     96c:	81 e0       	ldi	r24, 0x01	; 1
         break;
     96e:	08 95       	ret
      case C2_RPM_PORT:
         command->data = settings.RPMPort; 
     970:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL8settings+0x1>
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	84 83       	std	Z+4, r24	; 0x04
     97c:	95 83       	std	Z+5, r25	; 0x05
     97e:	a6 83       	std	Z+6, r26	; 0x06
     980:	b7 83       	std	Z+7, r27	; 0x07
         result = true;
     982:	81 e0       	ldi	r24, 0x01	; 1
         break;
     984:	08 95       	ret
      case C2_ERROR_PORT:
         command->data = settings.ErrorPort; 
     986:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZL8settings+0x2>
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	84 83       	std	Z+4, r24	; 0x04
     992:	95 83       	std	Z+5, r25	; 0x05
     994:	a6 83       	std	Z+6, r26	; 0x06
     996:	b7 83       	std	Z+7, r27	; 0x07
         result = true;         
     998:	81 e0       	ldi	r24, 0x01	; 1
         break;
     99a:	08 95       	ret
      case C2_TEMPERATURE_PORT:
         command->data = settings.TempraturePort; 
     99c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_ZL8settings+0x3>
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	84 83       	std	Z+4, r24	; 0x04
     9a8:	95 83       	std	Z+5, r25	; 0x05
     9aa:	a6 83       	std	Z+6, r26	; 0x06
     9ac:	b7 83       	std	Z+7, r27	; 0x07
         result = true;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
         break;
     9b0:	08 95       	ret
      case C2_NR_POLS:
         command->data = settings.NumberofPools; 
     9b2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZL8settings+0x4>
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	84 83       	std	Z+4, r24	; 0x04
     9be:	95 83       	std	Z+5, r25	; 0x05
     9c0:	a6 83       	std	Z+6, r26	; 0x06
     9c2:	b7 83       	std	Z+7, r27	; 0x07
         result = true;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
         break;             
     9c6:	08 95       	ret
	  case C2_CAL_CURRENT_CAL:
		command->data = settings.CurrentCal;
     9c8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZL8settings+0x5>
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	a0 e0       	ldi	r26, 0x00	; 0
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	84 83       	std	Z+4, r24	; 0x04
     9d4:	95 83       	std	Z+5, r25	; 0x05
     9d6:	a6 83       	std	Z+6, r26	; 0x06
     9d8:	b7 83       	std	Z+7, r27	; 0x07
		result = true;
     9da:	81 e0       	ldi	r24, 0x01	; 1
		break;
     9dc:	08 95       	ret
      default:
         result = false;
     9de:	80 e0       	ldi	r24, 0x00	; 0
   }
   return result;
}
     9e0:	08 95       	ret

000009e2 <_Z12doSettingSetP14COMMAND_STRUCT>:

bool doSettingSet(COMMAND_STRUCT *command)
{
     9e2:	fc 01       	movw	r30, r24
   bool result = false;
   
   switch (command->command2)
     9e4:	93 81       	ldd	r25, Z+3	; 0x03
     9e6:	93 32       	cpi	r25, 0x23	; 35
     9e8:	b1 f0       	breq	.+44     	; 0xa16 <_Z12doSettingSetP14COMMAND_STRUCT+0x34>
     9ea:	28 f4       	brcc	.+10     	; 0x9f6 <_Z12doSettingSetP14COMMAND_STRUCT+0x14>
     9ec:	91 32       	cpi	r25, 0x21	; 33
     9ee:	49 f0       	breq	.+18     	; 0xa02 <_Z12doSettingSetP14COMMAND_STRUCT+0x20>
     9f0:	92 32       	cpi	r25, 0x22	; 34
     9f2:	61 f0       	breq	.+24     	; 0xa0c <_Z12doSettingSetP14COMMAND_STRUCT+0x2a>
     9f4:	24 c0       	rjmp	.+72     	; 0xa3e <_Z12doSettingSetP14COMMAND_STRUCT+0x5c>
     9f6:	95 32       	cpi	r25, 0x25	; 37
     9f8:	c1 f0       	breq	.+48     	; 0xa2a <_Z12doSettingSetP14COMMAND_STRUCT+0x48>
     9fa:	90 f0       	brcs	.+36     	; 0xa20 <_Z12doSettingSetP14COMMAND_STRUCT+0x3e>
     9fc:	91 33       	cpi	r25, 0x31	; 49
     9fe:	d1 f0       	breq	.+52     	; 0xa34 <_Z12doSettingSetP14COMMAND_STRUCT+0x52>
     a00:	1e c0       	rjmp	.+60     	; 0xa3e <_Z12doSettingSetP14COMMAND_STRUCT+0x5c>
   {
      case C2_CURRENT_PORT:
         settings.CurrentPort = command->data;
     a02:	84 81       	ldd	r24, Z+4	; 0x04
     a04:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZL8settings>
         result = true;
     a08:	81 e0       	ldi	r24, 0x01	; 1
         break;
     a0a:	08 95       	ret
      case C2_RPM_PORT:
         settings.RPMPort = command->data;
     a0c:	84 81       	ldd	r24, Z+4	; 0x04
     a0e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZL8settings+0x1>
         result = true;
     a12:	81 e0       	ldi	r24, 0x01	; 1
         break;
     a14:	08 95       	ret
      case C2_ERROR_PORT:
         settings.ErrorPort = command->data;
     a16:	84 81       	ldd	r24, Z+4	; 0x04
     a18:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_ZL8settings+0x2>
         result = true;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
         break;
     a1e:	08 95       	ret
      case C2_TEMPERATURE_PORT:
         settings.TempraturePort = command->data;
     a20:	84 81       	ldd	r24, Z+4	; 0x04
     a22:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_ZL8settings+0x3>
         result = true;
     a26:	81 e0       	ldi	r24, 0x01	; 1
         break;
     a28:	08 95       	ret
      case C2_NR_POLS:
         settings.NumberofPools = command->data;
     a2a:	84 81       	ldd	r24, Z+4	; 0x04
     a2c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_ZL8settings+0x4>
         result = true;
     a30:	81 e0       	ldi	r24, 0x01	; 1
         break;
     a32:	08 95       	ret
      case C2_CAL_CURRENT_CAL:
      	  settings.CurrentCal = command->data;
     a34:	84 81       	ldd	r24, Z+4	; 0x04
     a36:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_ZL8settings+0x5>
      	  result = true;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
      	  break;
     a3c:	08 95       	ret
      default:
         result = false;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
   }
   return result;
}
     a40:	08 95       	ret

00000a42 <_Z16doSettingCommandP14COMMAND_STRUCT>:

bool doSettingCommand(COMMAND_STRUCT *command)
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ec 01       	movw	r28, r24
   bool result = false;
   //C1
   switch (command->command1)
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	84 30       	cpi	r24, 0x04	; 4
     a4c:	89 f0       	breq	.+34     	; 0xa70 <_Z16doSettingCommandP14COMMAND_STRUCT+0x2e>
     a4e:	18 f4       	brcc	.+6      	; 0xa56 <_Z16doSettingCommandP14COMMAND_STRUCT+0x14>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	31 f0       	breq	.+12     	; 0xa60 <_Z16doSettingCommandP14COMMAND_STRUCT+0x1e>
     a54:	19 c0       	rjmp	.+50     	; 0xa88 <_Z16doSettingCommandP14COMMAND_STRUCT+0x46>
     a56:	85 30       	cpi	r24, 0x05	; 5
     a58:	79 f0       	breq	.+30     	; 0xa78 <_Z16doSettingCommandP14COMMAND_STRUCT+0x36>
     a5a:	86 30       	cpi	r24, 0x06	; 6
     a5c:	89 f0       	breq	.+34     	; 0xa80 <_Z16doSettingCommandP14COMMAND_STRUCT+0x3e>
     a5e:	14 c0       	rjmp	.+40     	; 0xa88 <_Z16doSettingCommandP14COMMAND_STRUCT+0x46>
   {
      case C1_CHECK_SYSYEM:
         command->command1 = 0;               
     a60:	1a 82       	std	Y+2, r1	; 0x02
         command->command2 = 0;
     a62:	1b 82       	std	Y+3, r1	; 0x03
         command->data     = 0; 
     a64:	1c 82       	std	Y+4, r1	; 0x04
     a66:	1d 82       	std	Y+5, r1	; 0x05
     a68:	1e 82       	std	Y+6, r1	; 0x06
     a6a:	1f 82       	std	Y+7, r1	; 0x07
		 result = true;        
     a6c:	81 e0       	ldi	r24, 0x01	; 1
         break;
     a6e:	0d c0       	rjmp	.+26     	; 0xa8a <_Z16doSettingCommandP14COMMAND_STRUCT+0x48>
      case C1_SET_SYSYEM:
         break;
      case C1_SET_ESC:
         break;
      case C1_GET:
         result = doSettingGet(command);
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 9d 04 	call	0x93a	; 0x93a <_Z12doSettingGetP14COMMAND_STRUCT>
         break;
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <_Z16doSettingCommandP14COMMAND_STRUCT+0x48>
      case C1_SET:
         result = doSettingSet(command);
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z12doSettingSetP14COMMAND_STRUCT>
         break;
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <_Z16doSettingCommandP14COMMAND_STRUCT+0x48>
      case C1_SAVE:
		 store_settings();
     a80:	0e 94 25 04 	call	0x84a	; 0x84a <_Z14store_settingsv>
         result = true;
     a84:	81 e0       	ldi	r24, 0x01	; 1
         break;
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <_Z16doSettingCommandP14COMMAND_STRUCT+0x48>
   return result;
}

bool doSettingCommand(COMMAND_STRUCT *command)
{
   bool result = false;
     a88:	80 e0       	ldi	r24, 0x00	; 0
         result = true;
         break;
      default:         
         result = false;
   }
   command->Id = REPLY_ID;
     a8a:	25 e5       	ldi	r18, 0x55	; 85
     a8c:	33 e3       	ldi	r19, 0x33	; 51
     a8e:	39 83       	std	Y+1, r19	; 0x01
     a90:	28 83       	st	Y, r18

   return result; 
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <_Z22SettingsGetCurrentPortv>:

uint8_t SettingsGetCurrentPort()
{
	return settings.CurrentPort;
}
     a98:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZL8settings>
     a9c:	08 95       	ret

00000a9e <_Z18SettingsGetRPMPortv>:

uint8_t SettingsGetRPMPort()
{
	return settings.RPMPort;
}
     a9e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL8settings+0x1>
     aa2:	08 95       	ret

00000aa4 <_Z20SettingsGetErrorPortv>:

uint8_t SettingsGetErrorPort()
{
	return settings.ErrorPort;
}
     aa4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZL8settings+0x2>
     aa8:	08 95       	ret

00000aaa <_Z25SettingsGetTempraturePortv>:

uint8_t SettingsGetTempraturePort()
{
	return settings.TempraturePort;
}
     aaa:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_ZL8settings+0x3>
     aae:	08 95       	ret

00000ab0 <_Z24SettingsGetNumberofPoolsv>:

uint8_t SettingsGetNumberofPools()
{
	return settings.NumberofPools;
}
     ab0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZL8settings+0x4>
     ab4:	08 95       	ret

00000ab6 <_Z20SettingsGetCurentCalv>:

uint8_t SettingsGetCurentCal() 
{
	return 117;
     ab6:	85 e7       	ldi	r24, 0x75	; 117
     ab8:	08 95       	ret

00000aba <main>:

static COMMAND_DATA  command;

int main(void)
{
   load_settings();        
     aba:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_Z13load_settingsv>
   SBUS2_Setup(	SettingsGetCurrentPort(), 
				SettingsGetTempraturePort(), 
				SettingsGetRPMPort(), 
				SettingsGetErrorPort(), 
				SettingsGetCurentCal(),
				SettingsGetNumberofPools());
     abe:	0e 94 58 05 	call	0xab0	; 0xab0 <_Z24SettingsGetNumberofPoolsv>
     ac2:	e8 2e       	mov	r14, r24
     ac4:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Z20SettingsGetCurentCalv>
     ac8:	08 2f       	mov	r16, r24
     aca:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_Z20SettingsGetErrorPortv>
     ace:	18 2f       	mov	r17, r24
     ad0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_Z18SettingsGetRPMPortv>
     ad4:	d8 2f       	mov	r29, r24
     ad6:	0e 94 55 05 	call	0xaaa	; 0xaaa <_Z25SettingsGetTempraturePortv>
     ada:	c8 2f       	mov	r28, r24
     adc:	0e 94 4c 05 	call	0xa98	; 0xa98 <_Z22SettingsGetCurrentPortv>
     ae0:	21 2f       	mov	r18, r17
     ae2:	4d 2f       	mov	r20, r29
     ae4:	6c 2f       	mov	r22, r28
     ae6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_Z11SBUS2_Setuphhhhhh>
   SBUS2_uart_command_length(sizeof(COMMAND_STRUCT));   
     aea:	89 e0       	ldi	r24, 0x09	; 9
     aec:	0e 94 86 07 	call	0xf0c	; 0xf0c <_Z25SBUS2_uart_command_lengthh>
               command.data.command1 = C1_ERROR;  
            }            
         }
         else
         {            
            command.data.command1 = C1_ERROR;
     af0:	c1 ef       	ldi	r28, 0xF1	; 241
				SettingsGetNumberofPools());
   SBUS2_uart_command_length(sizeof(COMMAND_STRUCT));   

   while(1)
   {
      SBUS2_loop();
     af2:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z10SBUS2_loopv>
      if(SBUS2_get_command(command.array))
     af6:	8d e0       	ldi	r24, 0x0D	; 13
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	0e 94 26 0a 	call	0x144c	; 0x144c <_Z17SBUS2_get_commandPh>
     afe:	88 23       	and	r24, r24
     b00:	c1 f3       	breq	.-16     	; 0xaf2 <main+0x38>
      { 
         if (crc_cal(command.array, sizeof(command)-1) == command.data.crc)
     b02:	68 e0       	ldi	r22, 0x08	; 8
     b04:	8d e0       	ldi	r24, 0x0D	; 13
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	0e 94 09 04 	call	0x812	; 0x812 <_Z7crc_calPhh>
     b0c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <_ZL7command+0x8>
     b10:	89 13       	cpse	r24, r25
     b12:	09 c0       	rjmp	.+18     	; 0xb26 <main+0x6c>
         {// setting command
            if ( doSettingCommand( &command.data ) )
     b14:	8d e0       	ldi	r24, 0x0D	; 13
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	0e 94 21 05 	call	0xa42	; 0xa42 <_Z16doSettingCommandP14COMMAND_STRUCT>
     b1c:	81 11       	cpse	r24, r1
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <main+0x70>
            {
            
            }
            else
            {
               command.data.command1 = C1_ERROR;  
     b20:	c0 93 0f 02 	sts	0x020F, r28	; 0x80020f <_ZL7command+0x2>
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <main+0x70>
            }            
         }
         else
         {            
            command.data.command1 = C1_ERROR;
     b26:	c0 93 0f 02 	sts	0x020F, r28	; 0x80020f <_ZL7command+0x2>
         }  
         command.data.crc = crc_cal(command.array, sizeof(command)-1);       
     b2a:	68 e0       	ldi	r22, 0x08	; 8
     b2c:	8d e0       	ldi	r24, 0x0D	; 13
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	0e 94 09 04 	call	0x812	; 0x812 <_Z7crc_calPhh>
     b34:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZL7command+0x8>
         SBUS2_send_command(command.array);             
     b38:	8d e0       	ldi	r24, 0x0D	; 13
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 37 0a 	call	0x146e	; 0x146e <_Z18SBUS2_send_commandPh>
     b40:	d8 cf       	rjmp	.-80     	; 0xaf2 <main+0x38>

00000b42 <_ZL23do_servo_pulse_callbackm>:
   SBUS2_transmit_telemetry_data( currentPort+2 , bytes);
}

void do_servo_pulse_callback(uint32_t counter)
{
   do_servo_pulse = true;
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <_ZL14do_servo_pulse>
   absTime = counter;
     b48:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <_ZL7absTime>
     b4c:	70 93 24 02 	sts	0x0224, r23	; 0x800224 <_ZL7absTime+0x1>
     b50:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <_ZL7absTime+0x2>
     b54:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <_ZL7absTime+0x3>
     b58:	08 95       	ret

00000b5a <_Z11SBUS2_Setuphhhhhh>:
				 uint8_t rpm_port, 
				 uint8_t alarm_port, 
				 uint8_t current_cal,
				 uint8_t number_of_poles
				 )
{
     b5a:	ef 92       	push	r14
     b5c:	0f 93       	push	r16
   currentPort     = current_port;
     b5e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_ZL11currentPort>
   temperaturePort = temperature_port;
     b62:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <_ZL15temperaturePort>
   rpmPort         = rpm_port;
     b66:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <_ZL7rpmPort>
   alarmPort       = alarm_port;
     b6a:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <_ZL9alarmPort>
   currentCal      = current_cal;
     b6e:	00 93 9d 01 	sts	0x019D, r16	; 0x80019d <_ZL10currentCal>
   SBUS2_uart_setup(do_servo_pulse_callback);
     b72:	81 ea       	ldi	r24, 0xA1	; 161
     b74:	95 e0       	ldi	r25, 0x05	; 5
     b76:	0e 94 e7 07 	call	0xfce	; 0xfce <_Z16SBUS2_uart_setupPFvmE>
   CCesc_pwm_setup();
     b7a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z15CCesc_pwm_setupv>
   CCesc_Setup(number_of_poles);
     b7e:	8e 2d       	mov	r24, r14
     b80:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z11CCesc_Setuph>
}
     b84:	0f 91       	pop	r16
     b86:	ef 90       	pop	r14
     b88:	08 95       	ret

00000b8a <_Z8send_RPMj>:

void send_RPM(uint16_t RPM)
{
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <_Z8send_RPMj+0x6>
     b90:	1f 92       	push	r1
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
   int16_t value =  0;
   uint8_t bytes[SBUS2_TEL_DATA_SIZE] = {0x13, 0x00, 0x00 };
     b96:	23 e1       	ldi	r18, 0x13	; 19
     b98:	29 83       	std	Y+1, r18	; 0x01

   value =  RPM / 6;
     b9a:	9c 01       	movw	r18, r24
     b9c:	ab ea       	ldi	r26, 0xAB	; 171
     b9e:	ba ea       	ldi	r27, 0xAA	; 170
     ba0:	0e 94 28 0b 	call	0x1650	; 0x1650 <__umulhisi3>
     ba4:	96 95       	lsr	r25
     ba6:	87 95       	ror	r24
     ba8:	96 95       	lsr	r25
     baa:	87 95       	ror	r24
   bytes[2] = value >> 8;
     bac:	9b 83       	std	Y+3, r25	; 0x03
   bytes[1] = value;
     bae:	8a 83       	std	Y+2, r24	; 0x02
   SBUS2_transmit_telemetry_data( rpmPort , bytes);
     bb0:	be 01       	movw	r22, r28
     bb2:	6f 5f       	subi	r22, 0xFF	; 255
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <_ZL7rpmPort>
     bba:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z29SBUS2_transmit_telemetry_datahPh>
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <_Z12send_temp125i>:

void send_temp125(int16_t temp)
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <_Z12send_temp125i+0x6>
     bd0:	1f 92       	push	r1
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
   int16_t value=  0;
   uint8_t bytes[SBUS2_TEL_DATA_SIZE] = {0x13, 0x40, 0x00 };
     bd6:	23 e1       	ldi	r18, 0x13	; 19
     bd8:	29 83       	std	Y+1, r18	; 0x01

   value = temp | 0x4000;
     bda:	90 64       	ori	r25, 0x40	; 64
   bytes[1] = value >> 8;
     bdc:	9a 83       	std	Y+2, r25	; 0x02
   bytes[2] = value;
     bde:	8b 83       	std	Y+3, r24	; 0x03
   SBUS2_transmit_telemetry_data( temperaturePort , bytes);
     be0:	be 01       	movw	r22, r28
     be2:	6f 5f       	subi	r22, 0xFF	; 255
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <_ZL15temperaturePort>
     bea:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z29SBUS2_transmit_telemetry_datahPh>
}
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <_Z21send_alarm_as_temp125i>:

void send_alarm_as_temp125(int16_t alarm)
{
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <_Z21send_alarm_as_temp125i+0x6>
     c00:	1f 92       	push	r1
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
   int16_t value=  0;
   uint8_t bytes[SBUS2_TEL_DATA_SIZE] = {0x13, 0x40, 0x00 };
     c06:	23 e1       	ldi	r18, 0x13	; 19
     c08:	29 83       	std	Y+1, r18	; 0x01

   value = alarm | 0x4000;
     c0a:	90 64       	ori	r25, 0x40	; 64
   bytes[1] = value >> 8;
     c0c:	9a 83       	std	Y+2, r25	; 0x02
   bytes[2] = value;
     c0e:	8b 83       	std	Y+3, r24	; 0x03
   SBUS2_transmit_telemetry_data( alarmPort , bytes);
     c10:	be 01       	movw	r22, r28
     c12:	6f 5f       	subi	r22, 0xFF	; 255
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <_ZL9alarmPort>
     c1a:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z29SBUS2_transmit_telemetry_datahPh>
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	08 95       	ret

00000c2a <_Z18send_s1678_currentjjj>:


void send_s1678_current(uint16_t current, uint16_t capacity, uint16_t voltage)
{
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <_Z18send_s1678_currentjjj+0x12>
     c3c:	1f 92       	push	r1
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	8b 01       	movw	r16, r22
     c44:	7a 01       	movw	r14, r20
   uint16_t value = 0;
   uint32_t local = 0;
   uint8_t bytes[SBUS2_TEL_DATA_SIZE] = {0x03, 0x40, 0x00 };
     c46:	23 e0       	ldi	r18, 0x03	; 3
     c48:	29 83       	std	Y+1, r18	; 0x01
 
   
   // CURRENT
   local = ((uint32_t)current * 117) / 100 ;
     c4a:	9c 01       	movw	r18, r24
     c4c:	a5 e7       	ldi	r26, 0x75	; 117
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	0e 94 28 0b 	call	0x1650	; 0x1650 <__umulhisi3>
     c54:	24 e6       	ldi	r18, 0x64	; 100
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     c60:	21 15       	cp	r18, r1
     c62:	80 e4       	ldi	r24, 0x40	; 64
     c64:	38 07       	cpc	r19, r24
     c66:	10 f0       	brcs	.+4      	; 0xc6c <_Z18send_s1678_currentjjj+0x42>
     c68:	2f ef       	ldi	r18, 0xFF	; 255
     c6a:	3f e3       	ldi	r19, 0x3F	; 63
      // max current is 163.83
      value = 0x3FFF;
   }  
   bytes[1] = value >> 8;
   bytes[1] = bytes[1] | 0x40;
   bytes[1] = bytes[1] & 0x7F;
     c6c:	83 2f       	mov	r24, r19
     c6e:	8f 77       	andi	r24, 0x7F	; 127
     c70:	80 64       	ori	r24, 0x40	; 64
     c72:	8a 83       	std	Y+2, r24	; 0x02
   bytes[2] = value;
     c74:	2b 83       	std	Y+3, r18	; 0x03
   SBUS2_transmit_telemetry_data( currentPort , bytes);
     c76:	be 01       	movw	r22, r28
     c78:	6f 5f       	subi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <_ZL11currentPort>
     c80:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z29SBUS2_transmit_telemetry_datahPh>

   //VOLTAGE
   local = ((uint32_t)voltage * 105) / 100;
     c84:	97 01       	movw	r18, r14
     c86:	a9 e6       	ldi	r26, 0x69	; 105
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	0e 94 28 0b 	call	0x1650	; 0x1650 <__umulhisi3>
     c8e:	0f 2e       	mov	r0, r31
     c90:	f4 e6       	ldi	r31, 0x64	; 100
     c92:	cf 2e       	mov	r12, r31
     c94:	d1 2c       	mov	r13, r1
     c96:	e1 2c       	mov	r14, r1
     c98:	f1 2c       	mov	r15, r1
     c9a:	f0 2d       	mov	r31, r0
     c9c:	a7 01       	movw	r20, r14
     c9e:	96 01       	movw	r18, r12
     ca0:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
   value = (uint16_t)local;   
   bytes[1] = value >> 8;
     ca4:	3a 83       	std	Y+2, r19	; 0x02
   bytes[2] = value;
     ca6:	2b 83       	std	Y+3, r18	; 0x03
   SBUS2_transmit_telemetry_data( currentPort+1 , bytes);
     ca8:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <_ZL11currentPort>
     cac:	be 01       	movw	r22, r28
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z29SBUS2_transmit_telemetry_datahPh>

   // CAPACITY
   local = ((uint32_t)capacity * currentCal) / 100;
     cb8:	a0 91 9d 01 	lds	r26, 0x019D	; 0x80019d <_ZL10currentCal>
     cbc:	98 01       	movw	r18, r16
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	0e 94 28 0b 	call	0x1650	; 0x1650 <__umulhisi3>
     cc4:	a7 01       	movw	r20, r14
     cc6:	96 01       	movw	r18, r12
     cc8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
   value = (uint16_t)local;   
   bytes[1] = value >> 8;
     ccc:	3a 83       	std	Y+2, r19	; 0x02
   bytes[2] = value;
     cce:	2b 83       	std	Y+3, r18	; 0x03
   SBUS2_transmit_telemetry_data( currentPort+2 , bytes);
     cd0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <_ZL11currentPort>
     cd4:	be 01       	movw	r22, r28
     cd6:	6f 5f       	subi	r22, 0xFF	; 255
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	8e 5f       	subi	r24, 0xFE	; 254
     cdc:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z29SBUS2_transmit_telemetry_datahPh>
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	08 95       	ret

00000cf8 <_Z11CalCapacitym>:
   do_servo_pulse = true;
   absTime = counter;
}

uint16_t CalCapacity(uint32_t current_mA)
{
     cf8:	cf 92       	push	r12
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	9b 01       	movw	r18, r22
     d02:	ac 01       	movw	r20, r24
   static uint32_t usedCapacity = 0;
   static uint32_t refTimer =  0;

   uint32_t addUsedCapacity = 0;

   uint32_t deltaTime_ms = absTime - refTimer;
     d04:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <_ZL7absTime>
     d08:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <_ZL7absTime+0x1>
     d0c:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <_ZL7absTime+0x2>
     d10:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <_ZL7absTime+0x3>
     d14:	c0 90 1a 02 	lds	r12, 0x021A	; 0x80021a <_ZZ11CalCapacitymE8refTimer>
     d18:	d0 90 1b 02 	lds	r13, 0x021B	; 0x80021b <_ZZ11CalCapacitymE8refTimer+0x1>
     d1c:	e0 90 1c 02 	lds	r14, 0x021C	; 0x80021c <_ZZ11CalCapacitymE8refTimer+0x2>
     d20:	f0 90 1d 02 	lds	r15, 0x021D	; 0x80021d <_ZZ11CalCapacitymE8refTimer+0x3>
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	6c 19       	sub	r22, r12
     d2a:	7d 09       	sbc	r23, r13
     d2c:	8e 09       	sbc	r24, r14
     d2e:	9f 09       	sbc	r25, r15
   refTimer = absTime;
     d30:	c0 90 23 02 	lds	r12, 0x0223	; 0x800223 <_ZL7absTime>
     d34:	d0 90 24 02 	lds	r13, 0x0224	; 0x800224 <_ZL7absTime+0x1>
     d38:	e0 90 25 02 	lds	r14, 0x0225	; 0x800225 <_ZL7absTime+0x2>
     d3c:	f0 90 26 02 	lds	r15, 0x0226	; 0x800226 <_ZL7absTime+0x3>
     d40:	c0 92 1a 02 	sts	0x021A, r12	; 0x80021a <_ZZ11CalCapacitymE8refTimer>
     d44:	d0 92 1b 02 	sts	0x021B, r13	; 0x80021b <_ZZ11CalCapacitymE8refTimer+0x1>
     d48:	e0 92 1c 02 	sts	0x021C, r14	; 0x80021c <_ZZ11CalCapacitymE8refTimer+0x2>
     d4c:	f0 92 1d 02 	sts	0x021D, r15	; 0x80021d <_ZZ11CalCapacitymE8refTimer+0x3>

   addUsedCapacity =  current_mA * deltaTime_ms / 3600;
     d50:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsi3>
     d54:	20 e1       	ldi	r18, 0x10	; 16
     d56:	3e e0       	ldi	r19, 0x0E	; 14
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>

   usedCapacity = usedCapacity + addUsedCapacity;
     d60:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZZ11CalCapacitymE12usedCapacity>
     d64:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_ZZ11CalCapacitymE12usedCapacity+0x1>
     d68:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_ZZ11CalCapacitymE12usedCapacity+0x2>
     d6c:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_ZZ11CalCapacitymE12usedCapacity+0x3>
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	62 0f       	add	r22, r18
     d76:	73 1f       	adc	r23, r19
     d78:	84 1f       	adc	r24, r20
     d7a:	95 1f       	adc	r25, r21
     d7c:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <_ZZ11CalCapacitymE12usedCapacity>
     d80:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <_ZZ11CalCapacitymE12usedCapacity+0x1>
     d84:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <_ZZ11CalCapacitymE12usedCapacity+0x2>
     d88:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <_ZZ11CalCapacitymE12usedCapacity+0x3>
   return usedCapacity / 1000;
     d8c:	28 ee       	ldi	r18, 0xE8	; 232
     d8e:	33 e0       	ldi	r19, 0x03	; 3
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
}
     d98:	c9 01       	movw	r24, r18
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	08 95       	ret

00000da4 <_Z10SBUS2_loopv>:


void SBUS2_loop()
{
     da4:	4f 92       	push	r4
     da6:	5f 92       	push	r5
     da8:	6f 92       	push	r6
     daa:	7f 92       	push	r7
     dac:	8f 92       	push	r8
     dae:	9f 92       	push	r9
     db0:	af 92       	push	r10
     db2:	bf 92       	push	r11
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <_Z10SBUS2_loopv+0x22>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <_Z10SBUS2_loopv+0x24>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
   int16_t channel = 0;
   uint16_t uart_dropped_frame = false;
     dcc:	1a 82       	std	Y+2, r1	; 0x02
     dce:	19 82       	std	Y+1, r1	; 0x01
   bool transmision_dropt_frame = false;
     dd0:	1c 82       	std	Y+4, r1	; 0x04
   bool failsave = false;
     dd2:	1b 82       	std	Y+3, r1	; 0x03

   if (do_servo_pulse)
     dd4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_ZL14do_servo_pulse>
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <_Z10SBUS2_loopv+0x3a>
     ddc:	5f c0       	rjmp	.+190    	; 0xe9c <_Z10SBUS2_loopv+0xf8>
   {
      do_servo_pulse = false;
     dde:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <_ZL14do_servo_pulse>

      channel = SBUS2_get_servo_data( 2 );
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_Z20SBUS2_get_servo_datah>
     de8:	8c 01       	movw	r16, r24
      if (channel != -1 )
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <_Z10SBUS2_loopv+0x4c>
     dee:	56 c0       	rjmp	.+172    	; 0xe9c <_Z10SBUS2_loopv+0xf8>
      {
         if ( alarmPort != 0 )
     df0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <_ZL9alarmPort>
     df4:	88 23       	and	r24, r24
     df6:	f1 f0       	breq	.+60     	; 0xe34 <_Z10SBUS2_loopv+0x90>
         {
            SBUS2_get_status(&uart_dropped_frame, &transmision_dropt_frame, &failsave);
     df8:	ae 01       	movw	r20, r28
     dfa:	4d 5f       	subi	r20, 0xFD	; 253
     dfc:	5f 4f       	sbci	r21, 0xFF	; 255
     dfe:	be 01       	movw	r22, r28
     e00:	6c 5f       	subi	r22, 0xFC	; 252
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_Z16SBUS2_get_statusPjPbS0_>
            send_alarm_as_temp125( (failsave*1000) + (transmision_dropt_frame*100) + uart_dropped_frame);
     e0c:	4b 81       	ldd	r20, Y+3	; 0x03
     e0e:	28 ee       	ldi	r18, 0xE8	; 232
     e10:	33 e0       	ldi	r19, 0x03	; 3
     e12:	42 9f       	mul	r20, r18
     e14:	c0 01       	movw	r24, r0
     e16:	43 9f       	mul	r20, r19
     e18:	90 0d       	add	r25, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	2c 81       	ldd	r18, Y+4	; 0x04
     e1e:	34 e6       	ldi	r19, 0x64	; 100
     e20:	23 9f       	mul	r18, r19
     e22:	80 0d       	add	r24, r0
     e24:	91 1d       	adc	r25, r1
     e26:	11 24       	eor	r1, r1
     e28:	29 81       	ldd	r18, Y+1	; 0x01
     e2a:	3a 81       	ldd	r19, Y+2	; 0x02
     e2c:	82 0f       	add	r24, r18
     e2e:	93 1f       	adc	r25, r19
     e30:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_Z21send_alarm_as_temp125i>
         }
         CCesc_start_servo_pulse(channel);
     e34:	c8 01       	movw	r24, r16
     e36:	0e 94 a9 00 	call	0x152	; 0x152 <_Z23CCesc_start_servo_pulsej>

         send_temp125(CCesc_GetTemperature());
     e3a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z20CCesc_GetTemperaturev>
     e3e:	cb 01       	movw	r24, r22
     e40:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z12send_temp125i>
         //send_temp125(absTime/1000);
         send_s1678_current((uint16_t)(CCesc_GetCurrent()/10),
                            (uint16_t)CalCapacity(CCesc_GetCurrent()),
                            (uint16_t)(CCesc_GetVoltage()/10));
     e44:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z16CCesc_GetVoltagev>
     e48:	4b 01       	movw	r8, r22
     e4a:	5c 01       	movw	r10, r24
     e4c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16CCesc_GetCurrentv>
     e50:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_Z11CalCapacitym>
     e54:	8c 01       	movw	r16, r24
         }
         CCesc_start_servo_pulse(channel);

         send_temp125(CCesc_GetTemperature());
         //send_temp125(absTime/1000);
         send_s1678_current((uint16_t)(CCesc_GetCurrent()/10),
     e56:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z16CCesc_GetCurrentv>
     e5a:	2b 01       	movw	r4, r22
     e5c:	3c 01       	movw	r6, r24
                            (uint16_t)CalCapacity(CCesc_GetCurrent()),
                            (uint16_t)(CCesc_GetVoltage()/10));
     e5e:	0f 2e       	mov	r0, r31
     e60:	fa e0       	ldi	r31, 0x0A	; 10
     e62:	cf 2e       	mov	r12, r31
     e64:	d1 2c       	mov	r13, r1
     e66:	e1 2c       	mov	r14, r1
     e68:	f1 2c       	mov	r15, r1
     e6a:	f0 2d       	mov	r31, r0
     e6c:	c5 01       	movw	r24, r10
     e6e:	b4 01       	movw	r22, r8
     e70:	a7 01       	movw	r20, r14
     e72:	96 01       	movw	r18, r12
     e74:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     e78:	49 01       	movw	r8, r18
     e7a:	5a 01       	movw	r10, r20
         }
         CCesc_start_servo_pulse(channel);

         send_temp125(CCesc_GetTemperature());
         //send_temp125(absTime/1000);
         send_s1678_current((uint16_t)(CCesc_GetCurrent()/10),
     e7c:	c3 01       	movw	r24, r6
     e7e:	b2 01       	movw	r22, r4
     e80:	a7 01       	movw	r20, r14
     e82:	96 01       	movw	r18, r12
     e84:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
     e88:	da 01       	movw	r26, r20
     e8a:	c9 01       	movw	r24, r18
                            (uint16_t)CalCapacity(CCesc_GetCurrent()),
                            (uint16_t)(CCesc_GetVoltage()/10));
     e8c:	a4 01       	movw	r20, r8
     e8e:	b8 01       	movw	r22, r16
     e90:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z18send_s1678_currentjjj>
         send_RPM(CCesc_GetRPM());         
     e94:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z12CCesc_GetRPMv>
     e98:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_Z8send_RPMj>

      }
   }
   
   CCesc_CheckSequence();
     e9c:	0e 94 2b 01 	call	0x256	; 0x256 <_Z19CCesc_CheckSequencev>
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	9f 90       	pop	r9
     ebe:	8f 90       	pop	r8
     ec0:	7f 90       	pop	r7
     ec2:	6f 90       	pop	r6
     ec4:	5f 90       	pop	r5
     ec6:	4f 90       	pop	r4
     ec8:	08 95       	ret

00000eca <_Z19ISR_receive_timeoutv>:
   }
   else
   {
      return false;
   }
}
     eca:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <buffer_index>
     ece:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <_ZL14command_length>
     ed2:	68 13       	cpse	r22, r24
     ed4:	18 c0       	rjmp	.+48     	; 0xf06 <_Z19ISR_receive_timeoutv+0x3c>
     ed6:	61 50       	subi	r22, 0x01	; 1
     ed8:	87 eb       	ldi	r24, 0xB7	; 183
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 09 04 	call	0x812	; 0x812 <_Z7crc_calPhh>
     ee0:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <_ZL14command_length>
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	ea 54       	subi	r30, 0x4A	; 74
     ee8:	fd 4f       	sbci	r31, 0xFD	; 253
     eea:	80 81       	ld	r24, Z
     eec:	2d 9a       	sbi	0x05, 5	; 5
     eee:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <_ZL14command_length>
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	67 eb       	ldi	r22, 0xB7	; 183
     ef6:	72 e0       	ldi	r23, 0x02	; 2
     ef8:	87 ed       	ldi	r24, 0xD7	; 215
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <memcpy>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <_ZL16command_received>
     f06:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <buffer_index>
     f0a:	08 95       	ret

00000f0c <_Z25SBUS2_uart_command_lengthh>:
     f0c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <_ZL14command_length>
     f10:	08 95       	ret

00000f12 <_Z14sbus_uart_initv>:
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f20:	a0 ec       	ldi	r26, 0xC0	; 192
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	8c 91       	ld	r24, X
     f26:	8d 7f       	andi	r24, 0xFD	; 253
     f28:	8c 93       	st	X, r24
     f2a:	e2 ec       	ldi	r30, 0xC2	; 194
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	86 e0       	ldi	r24, 0x06	; 6
     f30:	80 83       	st	Z, r24
     f32:	c1 ec       	ldi	r28, 0xC1	; 193
     f34:	d0 e0       	ldi	r29, 0x00	; 0
     f36:	88 81       	ld	r24, Y
     f38:	8b 7f       	andi	r24, 0xFB	; 251
     f3a:	88 83       	st	Y, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	80 62       	ori	r24, 0x20	; 32
     f40:	80 83       	st	Z, r24
     f42:	80 81       	ld	r24, Z
     f44:	88 60       	ori	r24, 0x08	; 8
     f46:	80 83       	st	Z, r24
     f48:	8c 91       	ld	r24, X
     f4a:	88 23       	and	r24, r24
     f4c:	44 f4       	brge	.+16     	; 0xf5e <_Z14sbus_uart_initv+0x4c>
     f4e:	a6 ec       	ldi	r26, 0xC6	; 198
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e0 ec       	ldi	r30, 0xC0	; 192
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	8c 91       	ld	r24, X
     f58:	80 81       	ld	r24, Z
     f5a:	88 23       	and	r24, r24
     f5c:	e4 f3       	brlt	.-8      	; 0xf56 <_Z14sbus_uart_initv+0x44>
     f5e:	e1 ec       	ldi	r30, 0xC1	; 193
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 61       	ori	r24, 0x10	; 16
     f66:	80 83       	st	Z, r24
     f68:	80 81       	ld	r24, Z
     f6a:	80 68       	ori	r24, 0x80	; 128
     f6c:	80 83       	st	Z, r24
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	80 83       	st	Z, r24
     f74:	80 81       	ld	r24, Z
     f76:	80 64       	ori	r24, 0x40	; 64
     f78:	80 83       	st	Z, r24
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <_Z15sbus_timer_initv>:
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	e4 57       	subi	r30, 0x74	; 116
     f88:	fd 4f       	sbci	r31, 0xFD	; 253
     f8a:	10 82       	st	Z, r1
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	80 32       	cpi	r24, 0x20	; 32
     f90:	91 05       	cpc	r25, r1
     f92:	c1 f7       	brne	.-16     	; 0xf84 <_Z15sbus_timer_initv+0x4>
     f94:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     f98:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	87 bb       	out	0x17, r24	; 23
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     fa6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     faa:	08 95       	ret

00000fac <_Z15start_receivingv>:
     fac:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     fb0:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <buffer_index>
     fb4:	85 e6       	ldi	r24, 0x65	; 101
     fb6:	97 e0       	ldi	r25, 0x07	; 7
     fb8:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <timer_ISR+0x1>
     fbc:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <timer_ISR>
     fc0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     fc4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <receive_timeout_timer>
     fc8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     fcc:	08 95       	ret

00000fce <_Z16SBUS2_uart_setupPFvmE>:
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
     fd6:	f8 94       	cli
     fd8:	0e 94 89 07 	call	0xf12	; 0xf12 <_Z14sbus_uart_initv>
     fdc:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z15sbus_timer_initv>
     fe0:	25 9a       	sbi	0x04, 5	; 4
     fe2:	38 9a       	sbi	0x07, 0	; 7
     fe4:	3c 9a       	sbi	0x07, 4	; 7
     fe6:	40 9a       	sbi	0x08, 0	; 8
     fe8:	2d 9a       	sbi	0x05, 5	; 5
     fea:	8a ea       	ldi	r24, 0xAA	; 170
     fec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ff0:	e0 ec       	ldi	r30, 0xC0	; 192
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	85 ff       	sbrs	r24, 5
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <_Z16SBUS2_uart_setupPFvmE+0x26>
     ffa:	4f ef       	ldi	r20, 0xFF	; 255
     ffc:	53 ec       	ldi	r21, 0xC3	; 195
     ffe:	69 e0       	ldi	r22, 0x09	; 9
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	a6 ec       	ldi	r26, 0xC6	; 198
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e0 ec       	ldi	r30, 0xC0	; 192
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	1c 91       	ld	r17, X
    100c:	90 81       	ld	r25, Z
    100e:	99 23       	and	r25, r25
    1010:	ec f3       	brlt	.-6      	; 0x100c <_Z16SBUS2_uart_setupPFvmE+0x3e>
    1012:	41 50       	subi	r20, 0x01	; 1
    1014:	51 09       	sbc	r21, r1
    1016:	61 09       	sbc	r22, r1
    1018:	71 09       	sbc	r23, r1
    101a:	19 f0       	breq	.+6      	; 0x1022 <_Z16SBUS2_uart_setupPFvmE+0x54>
    101c:	15 35       	cpi	r17, 0x55	; 85
    101e:	a9 f7       	brne	.-22     	; 0x100a <_Z16SBUS2_uart_setupPFvmE+0x3c>
    1020:	0c c0       	rjmp	.+24     	; 0x103a <_Z16SBUS2_uart_setupPFvmE+0x6c>
    1022:	d0 93 2a 02 	sts	0x022A, r29	; 0x80022a <do_servo_pulls+0x1>
    1026:	c0 93 29 02 	sts	0x0229, r28	; 0x800229 <do_servo_pulls>
    102a:	0e 94 d6 07 	call	0xfac	; 0xfac <_Z15start_receivingv>
    102e:	15 35       	cpi	r17, 0x55	; 85
    1030:	11 f0       	breq	.+4      	; 0x1036 <_Z16SBUS2_uart_setupPFvmE+0x68>
    1032:	40 9a       	sbi	0x08, 0	; 8
    1034:	2d 98       	cbi	0x05, 5	; 5
    1036:	78 94       	sei
    1038:	07 c0       	rjmp	.+14     	; 0x1048 <_Z16SBUS2_uart_setupPFvmE+0x7a>
    103a:	d0 93 2a 02 	sts	0x022A, r29	; 0x80022a <do_servo_pulls+0x1>
    103e:	c0 93 29 02 	sts	0x0229, r28	; 0x800229 <do_servo_pulls>
    1042:	0e 94 d6 07 	call	0xfac	; 0xfac <_Z15start_receivingv>
    1046:	f7 cf       	rjmp	.-18     	; 0x1036 <_Z16SBUS2_uart_setupPFvmE+0x68>
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	08 95       	ret

00001050 <__vector_7>:
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <timer_ISR>
    1076:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <timer_ISR+0x1>
    107a:	09 95       	icall
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_9>:
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <overflow_counter>
    10b0:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <overflow_counter+0x1>
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <overflow_counter+0x1>
    10ba:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <overflow_counter>
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <_Z24start_transmit_sequencerh>:
    10cc:	2d e3       	ldi	r18, 0x3D	; 61
    10ce:	39 e0       	ldi	r19, 0x09	; 9
    10d0:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <timer_ISR+0x1>
    10d4:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <timer_ISR>
    10d8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <transmit_sequence_timer>
    10dc:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    10e6:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <_ZL16gl_current_frame>
    10ea:	08 95       	ret

000010ec <__vector_18>:
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
    1112:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <_ZL11frame_ready>
    1116:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1120:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1124:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <buffer_index>
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	e9 54       	subi	r30, 0x49	; 73
    112c:	fd 4f       	sbci	r31, 0xFD	; 253
    112e:	80 83       	st	Z, r24
    1130:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <buffer_index>
    1134:	9f 5f       	subi	r25, 0xFF	; 255
    1136:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <buffer_index>
    113a:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <buffer_index>
    113e:	99 31       	cpi	r25, 0x19	; 25
    1140:	09 f0       	breq	.+2      	; 0x1144 <__vector_18+0x58>
    1142:	66 c0       	rjmp	.+204    	; 0x1210 <__vector_18+0x124>
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <_ZL11frame_ready>
    114a:	2d 9a       	sbi	0x05, 5	; 5
    114c:	80 73       	andi	r24, 0x30	; 48
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	95 95       	asr	r25
    1152:	87 95       	ror	r24
    1154:	95 95       	asr	r25
    1156:	87 95       	ror	r24
    1158:	95 95       	asr	r25
    115a:	87 95       	ror	r24
    115c:	95 95       	asr	r25
    115e:	87 95       	ror	r24
    1160:	40 91 b2 02 	lds	r20, 0x02B2	; 0x8002b2 <previousFrame>
    1164:	28 2f       	mov	r18, r24
    1166:	08 2e       	mov	r0, r24
    1168:	00 0c       	add	r0, r0
    116a:	33 0b       	sbc	r19, r19
    116c:	24 1b       	sub	r18, r20
    116e:	31 09       	sbc	r19, r1
    1170:	47 fd       	sbrc	r20, 7
    1172:	33 95       	inc	r19
    1174:	23 70       	andi	r18, 0x03	; 3
    1176:	30 78       	andi	r19, 0x80	; 128
    1178:	33 23       	and	r19, r19
    117a:	34 f4       	brge	.+12     	; 0x1188 <__vector_18+0x9c>
    117c:	21 50       	subi	r18, 0x01	; 1
    117e:	31 09       	sbc	r19, r1
    1180:	2c 6f       	ori	r18, 0xFC	; 252
    1182:	3f 6f       	ori	r19, 0xFF	; 255
    1184:	2f 5f       	subi	r18, 0xFF	; 255
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	42 2f       	mov	r20, r18
    118a:	12 16       	cp	r1, r18
    118c:	14 f0       	brlt	.+4      	; 0x1192 <__vector_18+0xa6>
    118e:	44 e0       	ldi	r20, 0x04	; 4
    1190:	42 0f       	add	r20, r18
    1192:	42 30       	cpi	r20, 0x02	; 2
    1194:	54 f0       	brlt	.+20     	; 0x11aa <__vector_18+0xbe>
    1196:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <_ZL15uart_lost_frame>
    119a:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <_ZL15uart_lost_frame+0x1>
    119e:	2f 5f       	subi	r18, 0xFF	; 255
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	30 93 b4 02 	sts	0x02B4, r19	; 0x8002b4 <_ZL15uart_lost_frame+0x1>
    11a6:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <_ZL15uart_lost_frame>
    11aa:	00 91 ae 02 	lds	r16, 0x02AE	; 0x8002ae <frameCounter>
    11ae:	10 91 af 02 	lds	r17, 0x02AF	; 0x8002af <frameCounter+0x1>
    11b2:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <frameCounter+0x2>
    11b6:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <frameCounter+0x3>
    11ba:	04 2e       	mov	r0, r20
    11bc:	00 0c       	add	r0, r0
    11be:	55 0b       	sbc	r21, r21
    11c0:	66 0b       	sbc	r22, r22
    11c2:	77 0b       	sbc	r23, r23
    11c4:	40 0f       	add	r20, r16
    11c6:	51 1f       	adc	r21, r17
    11c8:	62 1f       	adc	r22, r18
    11ca:	73 1f       	adc	r23, r19
    11cc:	40 93 ae 02 	sts	0x02AE, r20	; 0x8002ae <frameCounter>
    11d0:	50 93 af 02 	sts	0x02AF, r21	; 0x8002af <frameCounter+0x1>
    11d4:	60 93 b0 02 	sts	0x02B0, r22	; 0x8002b0 <frameCounter+0x2>
    11d8:	70 93 b1 02 	sts	0x02B1, r23	; 0x8002b1 <frameCounter+0x3>
    11dc:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <previousFrame>
    11e0:	0e 94 66 08 	call	0x10cc	; 0x10cc <_Z24start_transmit_sequencerh>
    11e4:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <do_servo_pulls>
    11e8:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <do_servo_pulls+0x1>
    11ec:	30 97       	sbiw	r30, 0x00	; 0
    11ee:	71 f0       	breq	.+28     	; 0x120c <__vector_18+0x120>
    11f0:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <frameLength>
    11f4:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <frameCounter>
    11f8:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <frameCounter+0x1>
    11fc:	40 91 b0 02 	lds	r20, 0x02B0	; 0x8002b0 <frameCounter+0x2>
    1200:	50 91 b1 02 	lds	r21, 0x02B1	; 0x8002b1 <frameCounter+0x3>
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
    120a:	09 95       	icall
    120c:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <buffer_index>
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <_Z15sbus2_send_sloth>:
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	f9 01       	movw	r30, r18
    123c:	e4 57       	subi	r30, 0x74	; 116
    123e:	fd 4f       	sbci	r31, 0xFD	; 253
    1240:	90 81       	ld	r25, Z
    1242:	92 30       	cpi	r25, 0x02	; 2
    1244:	c9 f4       	brne	.+50     	; 0x1278 <_Z15sbus2_send_sloth+0x42>
    1246:	f9 01       	movw	r30, r18
    1248:	e4 57       	subi	r30, 0x74	; 116
    124a:	fd 4f       	sbci	r31, 0xFD	; 253
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	40 83       	st	Z, r20
    1250:	2d 9a       	sbi	0x05, 5	; 5
    1252:	40 98       	cbi	0x08, 0	; 8
    1254:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <gl_slot>
    1258:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <gl_slot>
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	fc 01       	movw	r30, r24
    1260:	ee 0f       	add	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	8e 0f       	add	r24, r30
    1266:	9f 1f       	adc	r25, r31
    1268:	fc 01       	movw	r30, r24
    126a:	e4 5d       	subi	r30, 0xD4	; 212
    126c:	fd 4f       	sbci	r31, 0xFD	; 253
    126e:	80 81       	ld	r24, Z
    1270:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1274:	40 93 ad 02 	sts	0x02AD, r20	; 0x8002ad <tx_data_counter>
    1278:	08 95       	ret

0000127a <_Z12ISR_transmitv>:
    127a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    127e:	78 94       	sei
    1280:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_ZZ12ISR_transmitvE14sequence_count>
    1284:	e2 30       	cpi	r30, 0x02	; 2
    1286:	38 f4       	brcc	.+14     	; 0x1296 <_Z12ISR_transmitv+0x1c>
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	ef 55       	subi	r30, 0x5F	; 95
    128c:	fe 4f       	sbci	r31, 0xFE	; 254
    128e:	80 81       	ld	r24, Z
    1290:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1294:	3a c0       	rjmp	.+116    	; 0x130a <_Z12ISR_transmitv+0x90>
    1296:	ea 30       	cpi	r30, 0x0A	; 10
    1298:	98 f4       	brcc	.+38     	; 0x12c0 <_Z12ISR_transmitv+0x46>
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ef 55       	subi	r30, 0x5F	; 95
    129e:	fe 4f       	sbci	r31, 0xFE	; 254
    12a0:	80 81       	ld	r24, Z
    12a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    12a6:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <_ZL16gl_current_frame>
    12aa:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <_ZZ12ISR_transmitvE14sequence_count>
    12ae:	22 50       	subi	r18, 0x02	; 2
    12b0:	89 2f       	mov	r24, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	88 0f       	add	r24, r24
    12b6:	88 0f       	add	r24, r24
    12b8:	82 0f       	add	r24, r18
    12ba:	0e 94 1b 09 	call	0x1236	; 0x1236 <_Z15sbus2_send_sloth>
    12be:	25 c0       	rjmp	.+74     	; 0x130a <_Z12ISR_transmitv+0x90>
    12c0:	eb 30       	cpi	r30, 0x0B	; 11
    12c2:	38 f4       	brcc	.+14     	; 0x12d2 <_Z12ISR_transmitv+0x58>
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	ef 55       	subi	r30, 0x5F	; 95
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	80 81       	ld	r24, Z
    12cc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    12d0:	1c c0       	rjmp	.+56     	; 0x130a <_Z12ISR_transmitv+0x90>
    12d2:	ee 30       	cpi	r30, 0x0E	; 14
    12d4:	38 f4       	brcc	.+14     	; 0x12e4 <_Z12ISR_transmitv+0x6a>
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	ef 55       	subi	r30, 0x5F	; 95
    12da:	fe 4f       	sbci	r31, 0xFE	; 254
    12dc:	80 81       	ld	r24, Z
    12de:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    12e2:	13 c0       	rjmp	.+38     	; 0x130a <_Z12ISR_transmitv+0x90>
    12e4:	ef 30       	cpi	r30, 0x0F	; 15
    12e6:	48 f4       	brcc	.+18     	; 0x12fa <_Z12ISR_transmitv+0x80>
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	ef 55       	subi	r30, 0x5F	; 95
    12ec:	fe 4f       	sbci	r31, 0xFE	; 254
    12ee:	80 81       	ld	r24, Z
    12f0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    12f4:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <_ZL11frame_ready>
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <_Z12ISR_transmitv+0x90>
    12fa:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    12fe:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZZ12ISR_transmitvE14sequence_count>
    1302:	40 9a       	sbi	0x08, 0	; 8
    1304:	2d 98       	cbi	0x05, 5	; 5
    1306:	0e 94 d6 07 	call	0xfac	; 0xfac <_Z15start_receivingv>
    130a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZZ12ISR_transmitvE14sequence_count>
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_ZZ12ISR_transmitvE14sequence_count>
    1314:	17 ba       	out	0x17, r1	; 23
    1316:	08 95       	ret

00001318 <__vector_20>:
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	2f 93       	push	r18
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
    132c:	78 94       	sei
    132e:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <gl_slot>
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	e4 57       	subi	r30, 0x74	; 116
    1336:	fd 4f       	sbci	r31, 0xFD	; 253
    1338:	80 81       	ld	r24, Z
    133a:	88 23       	and	r24, r24
    133c:	11 f1       	breq	.+68     	; 0x1382 <__vector_20+0x6a>
    133e:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <tx_data_counter>
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	b8 f4       	brcc	.+46     	; 0x1374 <__vector_20+0x5c>
    1346:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <gl_slot>
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <tx_data_counter>
    1350:	fc 01       	movw	r30, r24
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	e8 0f       	add	r30, r24
    1358:	f9 1f       	adc	r31, r25
    135a:	e2 0f       	add	r30, r18
    135c:	f1 1d       	adc	r31, r1
    135e:	e4 5d       	subi	r30, 0xD4	; 212
    1360:	fd 4f       	sbci	r31, 0xFD	; 253
    1362:	80 81       	ld	r24, Z
    1364:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1368:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <tx_data_counter>
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <tx_data_counter>
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <__vector_20+0x6a>
    1374:	40 9a       	sbi	0x08, 0	; 8
    1376:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <gl_slot>
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	e4 57       	subi	r30, 0x74	; 116
    137e:	fd 4f       	sbci	r31, 0xFD	; 253
    1380:	10 82       	st	Z, r1
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <_Z29SBUS2_transmit_telemetry_datahPh>:
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	f9 01       	movw	r30, r18
    13a2:	e4 57       	subi	r30, 0x74	; 116
    13a4:	fd 4f       	sbci	r31, 0xFD	; 253
    13a6:	90 81       	ld	r25, Z
    13a8:	91 30       	cpi	r25, 0x01	; 1
    13aa:	11 f1       	breq	.+68     	; 0x13f0 <_Z29SBUS2_transmit_telemetry_datahPh+0x5a>
    13ac:	87 70       	andi	r24, 0x07	; 7
    13ae:	e8 2f       	mov	r30, r24
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	ef 54       	subi	r30, 0x4F	; 79
    13b4:	fe 4f       	sbci	r31, 0xFE	; 254
    13b6:	80 81       	ld	r24, Z
    13b8:	82 95       	swap	r24
    13ba:	88 0f       	add	r24, r24
    13bc:	80 7e       	andi	r24, 0xE0	; 224
    13be:	f9 01       	movw	r30, r18
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	e2 0f       	add	r30, r18
    13c6:	f3 1f       	adc	r31, r19
    13c8:	e4 5d       	subi	r30, 0xD4	; 212
    13ca:	fd 4f       	sbci	r31, 0xFD	; 253
    13cc:	db 01       	movw	r26, r22
    13ce:	cd 90       	ld	r12, X+
    13d0:	dd 90       	ld	r13, X+
    13d2:	ec 90       	ld	r14, X
    13d4:	c0 82       	st	Z, r12
    13d6:	d1 82       	std	Z+1, r13	; 0x01
    13d8:	e2 82       	std	Z+2, r14	; 0x02
    13da:	90 81       	ld	r25, Z
    13dc:	9f 71       	andi	r25, 0x1F	; 31
    13de:	90 83       	st	Z, r25
    13e0:	90 81       	ld	r25, Z
    13e2:	89 2b       	or	r24, r25
    13e4:	80 83       	st	Z, r24
    13e6:	f9 01       	movw	r30, r18
    13e8:	e4 57       	subi	r30, 0x74	; 116
    13ea:	fd 4f       	sbci	r31, 0xFD	; 253
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	80 83       	st	Z, r24
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	cf 90       	pop	r12
    13f6:	08 95       	ret

000013f8 <_Z16SBUS2_get_statusPjPbS0_>:


void SBUS2_get_status( uint16_t *uart_dropped_frame, bool *transmision_dropt_frame, bool *failsave )
{
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
   if (frameCounter < 60)
    13fc:	00 91 ae 02 	lds	r16, 0x02AE	; 0x8002ae <frameCounter>
    1400:	10 91 af 02 	lds	r17, 0x02AF	; 0x8002af <frameCounter+0x1>
    1404:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <frameCounter+0x2>
    1408:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <frameCounter+0x3>
    140c:	0c 33       	cpi	r16, 0x3C	; 60
    140e:	11 05       	cpc	r17, r1
    1410:	21 05       	cpc	r18, r1
    1412:	31 05       	cpc	r19, r1
    1414:	20 f4       	brcc	.+8      	; 0x141e <_Z16SBUS2_get_statusPjPbS0_+0x26>
   {
      uart_lost_frame = 0;
    1416:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZL15uart_lost_frame+0x1>
    141a:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZL15uart_lost_frame>
   }
   *uart_dropped_frame = uart_lost_frame;
    141e:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <_ZL15uart_lost_frame>
    1422:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <_ZL15uart_lost_frame+0x1>
    1426:	dc 01       	movw	r26, r24
    1428:	2d 93       	st	X+, r18
    142a:	3c 93       	st	X, r19
   *transmision_dropt_frame = rxbuf[23] & 0x20 ? true : false;
    142c:	e7 eb       	ldi	r30, 0xB7	; 183
    142e:	f2 e0       	ldi	r31, 0x02	; 2
    1430:	87 89       	ldd	r24, Z+23	; 0x17
    1432:	85 fb       	bst	r24, 5
    1434:	88 27       	eor	r24, r24
    1436:	80 f9       	bld	r24, 0
    1438:	db 01       	movw	r26, r22
    143a:	8c 93       	st	X, r24
   *failsave = rxbuf[23] & 0x10 ? true : false;
    143c:	87 89       	ldd	r24, Z+23	; 0x17
    143e:	82 95       	swap	r24
    1440:	81 70       	andi	r24, 0x01	; 1
    1442:	fa 01       	movw	r30, r20
    1444:	80 83       	st	Z, r24
}
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	08 95       	ret

0000144c <_Z17SBUS2_get_commandPh>:


bool SBUS2_get_command( uint8_t   *p_command )
{   
    144c:	cf 93       	push	r28
   if (command_received)
    144e:	c0 91 f5 02 	lds	r28, 0x02F5	; 0x8002f5 <_ZL16command_received>
    1452:	cc 23       	and	r28, r28
    1454:	49 f0       	breq	.+18     	; 0x1468 <_Z17SBUS2_get_commandPh+0x1c>
   {  
      memcpy(p_command, command, command_length);       
    1456:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <_ZL14command_length>
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	67 ed       	ldi	r22, 0xD7	; 215
    145e:	72 e0       	ldi	r23, 0x02	; 2
    1460:	0e 94 4a 0b 	call	0x1694	; 0x1694 <memcpy>
      command_received = false;   
    1464:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <_ZL16command_received>

      return true;
   }
   return false;
}
    1468:	8c 2f       	mov	r24, r28
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <_Z18SBUS2_send_commandPh>:


void SBUS2_send_command( uint8_t   *p_command )
{
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
   int index = 0;   
   
   for( index = 0; index < command_length; index++)
    1472:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <_ZL14command_length>
    1476:	22 23       	and	r18, r18
    1478:	a9 f0       	breq	.+42     	; 0x14a4 <_Z18SBUS2_send_commandPh+0x36>
    147a:	a8 2f       	mov	r26, r24
    147c:	b9 2f       	mov	r27, r25
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
   {
      while( !(UCSRA & (1<<UDRE))){}   
    1482:	e0 ec       	ldi	r30, 0xC0	; 192
    1484:	f0 e0       	ldi	r31, 0x00	; 0
      UDR = p_command[index];      
    1486:	c6 ec       	ldi	r28, 0xC6	; 198
    1488:	d0 e0       	ldi	r29, 0x00	; 0
{
   int index = 0;   
   
   for( index = 0; index < command_length; index++)
   {
      while( !(UCSRA & (1<<UDRE))){}   
    148a:	80 81       	ld	r24, Z
    148c:	85 ff       	sbrs	r24, 5
    148e:	fd cf       	rjmp	.-6      	; 0x148a <_Z18SBUS2_send_commandPh+0x1c>
      UDR = p_command[index];      
    1490:	8d 91       	ld	r24, X+
    1492:	88 83       	st	Y, r24

void SBUS2_send_command( uint8_t   *p_command )
{
   int index = 0;   
   
   for( index = 0; index < command_length; index++)
    1494:	2f 5f       	subi	r18, 0xFF	; 255
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <_ZL14command_length>
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	28 17       	cp	r18, r24
    14a0:	39 07       	cpc	r19, r25
    14a2:	9c f3       	brlt	.-26     	; 0x148a <_Z18SBUS2_send_commandPh+0x1c>
   {
      while( !(UCSRA & (1<<UDRE))){}   
      UDR = p_command[index];      
   } 
}   
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <_Z20SBUS2_get_servo_datah>:

int16_t SBUS2_get_servo_data( uint8_t channel )
{
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	6e 97       	sbiw	r28, 0x1e	; 30
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61

   uint16_t  servo = 0;
   uint8_t  start_bit  = 0;

   //noInterrupts();
   memcpy(channel_data, (void*)rxbuf, 24);
    14ca:	98 e1       	ldi	r25, 0x18	; 24
    14cc:	e7 eb       	ldi	r30, 0xB7	; 183
    14ce:	f2 e0       	ldi	r31, 0x02	; 2
    14d0:	de 01       	movw	r26, r28
    14d2:	11 96       	adiw	r26, 0x01	; 1
    14d4:	01 90       	ld	r0, Z+
    14d6:	0d 92       	st	X+, r0
    14d8:	9a 95       	dec	r25
    14da:	e1 f7       	brne	.-8      	; 0x14d4 <_Z20SBUS2_get_servo_datah+0x2a>
   //interrupts();

   if ( frame_ready )
    14dc:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <_ZL11frame_ready>
    14e0:	99 23       	and	r25, r25
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <_Z20SBUS2_get_servo_datah+0x3c>
    14e4:	53 c0       	rjmp	.+166    	; 0x158c <_Z20SBUS2_get_servo_datah+0xe2>
   {
      start_bit  = channel * SBUS_CHANNEL_SIZE ;
    14e6:	28 2f       	mov	r18, r24
    14e8:	22 0f       	add	r18, r18
    14ea:	92 2f       	mov	r25, r18
    14ec:	99 0f       	add	r25, r25
    14ee:	99 0f       	add	r25, r25
    14f0:	92 0f       	add	r25, r18
    14f2:	89 0f       	add	r24, r25
      bit_in_sbus  = start_bit % 8;
    14f4:	48 2f       	mov	r20, r24
    14f6:	47 70       	andi	r20, 0x07	; 7
    14f8:	50 e0       	ldi	r21, 0x00	; 0
      byte_in_sbus = (start_bit / 8) + 1;
    14fa:	98 2f       	mov	r25, r24
    14fc:	96 95       	lsr	r25
    14fe:	96 95       	lsr	r25
    1500:	96 95       	lsr	r25
    1502:	9f 5f       	subi	r25, 0xFF	; 255

      // process actual sbus data
      for (uint8_t i=start_bit; i<(start_bit+11); i++)
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	d9 01       	movw	r26, r18
    150a:	1b 96       	adiw	r26, 0x0b	; 11
    150c:	2a 17       	cp	r18, r26
    150e:	3b 07       	cpc	r19, r27
    1510:	c4 f5       	brge	.+112    	; 0x1582 <_Z20SBUS2_get_servo_datah+0xd8>
    1512:	c1 2c       	mov	r12, r1
    1514:	d1 2c       	mov	r13, r1
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
      {
         if (channel_data[byte_in_sbus] & (1<<bit_in_sbus))
         {
            servo |= (1<<bit_in_channel);
    151a:	01 e0       	ldi	r16, 0x01	; 1
    151c:	10 e0       	ldi	r17, 0x00	; 0
         bit_in_sbus++;
         bit_in_channel++;

         if (bit_in_sbus == 8)
         {
            bit_in_sbus =0;
    151e:	e1 2c       	mov	r14, r1
    1520:	f1 2c       	mov	r15, r1
      byte_in_sbus = (start_bit / 8) + 1;

      // process actual sbus data
      for (uint8_t i=start_bit; i<(start_bit+11); i++)
      {
         if (channel_data[byte_in_sbus] & (1<<bit_in_sbus))
    1522:	21 e0       	ldi	r18, 0x01	; 1
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	2c 0f       	add	r18, r28
    1528:	3d 1f       	adc	r19, r29
    152a:	29 0f       	add	r18, r25
    152c:	31 1d       	adc	r19, r1
    152e:	f9 01       	movw	r30, r18
    1530:	20 81       	ld	r18, Z
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	04 2e       	mov	r0, r20
    1536:	02 c0       	rjmp	.+4      	; 0x153c <_Z20SBUS2_get_servo_datah+0x92>
    1538:	35 95       	asr	r19
    153a:	27 95       	ror	r18
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <_Z20SBUS2_get_servo_datah+0x8e>
    1540:	20 ff       	sbrs	r18, 0
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <_Z20SBUS2_get_servo_datah+0xac>
         {
            servo |= (1<<bit_in_channel);
    1544:	98 01       	movw	r18, r16
    1546:	06 2e       	mov	r0, r22
    1548:	02 c0       	rjmp	.+4      	; 0x154e <_Z20SBUS2_get_servo_datah+0xa4>
    154a:	22 0f       	add	r18, r18
    154c:	33 1f       	adc	r19, r19
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <_Z20SBUS2_get_servo_datah+0xa0>
    1552:	c2 2a       	or	r12, r18
    1554:	d3 2a       	or	r13, r19
         }
         bit_in_sbus++;
    1556:	4f 5f       	subi	r20, 0xFF	; 255
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
         bit_in_channel++;
    155a:	6f 5f       	subi	r22, 0xFF	; 255
    155c:	7f 4f       	sbci	r23, 0xFF	; 255

         if (bit_in_sbus == 8)
    155e:	48 30       	cpi	r20, 0x08	; 8
    1560:	51 05       	cpc	r21, r1
    1562:	19 f4       	brne	.+6      	; 0x156a <_Z20SBUS2_get_servo_datah+0xc0>
         {
            bit_in_sbus =0;
            byte_in_sbus++;
    1564:	9f 5f       	subi	r25, 0xFF	; 255
         bit_in_sbus++;
         bit_in_channel++;

         if (bit_in_sbus == 8)
         {
            bit_in_sbus =0;
    1566:	4e 2d       	mov	r20, r14
    1568:	5f 2d       	mov	r21, r15
            byte_in_sbus++;
         }
         if (bit_in_channel == 11)
    156a:	6b 30       	cpi	r22, 0x0B	; 11
    156c:	71 05       	cpc	r23, r1
    156e:	11 f4       	brne	.+4      	; 0x1574 <_Z20SBUS2_get_servo_datah+0xca>
         {
            bit_in_channel =0;
    1570:	6e 2d       	mov	r22, r14
    1572:	7f 2d       	mov	r23, r15
      start_bit  = channel * SBUS_CHANNEL_SIZE ;
      bit_in_sbus  = start_bit % 8;
      byte_in_sbus = (start_bit / 8) + 1;

      // process actual sbus data
      for (uint8_t i=start_bit; i<(start_bit+11); i++)
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	2a 17       	cp	r18, r26
    157c:	3b 07       	cpc	r19, r27
    157e:	8c f2       	brlt	.-94     	; 0x1522 <_Z20SBUS2_get_servo_datah+0x78>
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <_Z20SBUS2_get_servo_datah+0xdc>
   uint16_t bit_in_sbus = 0;
   uint8_t ch = 0;
   uint16_t bit_in_channel = 0;
   uint8_t channel_data[UART_RXBUFSIZE];

   uint16_t  servo = 0;
    1582:	c1 2c       	mov	r12, r1
    1584:	d1 2c       	mov	r13, r1
         {
            bit_in_channel =0;
            ch++;
         }
      }
      return (int16_t)servo;
    1586:	8c 2d       	mov	r24, r12
    1588:	9d 2d       	mov	r25, r13
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <_Z20SBUS2_get_servo_datah+0xe6>
   }
   else
   {
      return -1;
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	9f ef       	ldi	r25, 0xFF	; 255
   }
}
    1590:	6e 96       	adiw	r28, 0x1e	; 30
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	08 95       	ret

000015ae <__mulsi3>:
    15ae:	db 01       	movw	r26, r22
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	a2 9f       	mul	r26, r18
    15be:	80 0d       	add	r24, r0
    15c0:	91 1d       	adc	r25, r1
    15c2:	a3 9f       	mul	r26, r19
    15c4:	90 0d       	add	r25, r0
    15c6:	b2 9f       	mul	r27, r18
    15c8:	90 0d       	add	r25, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	08 95       	ret

000015ce <__udivmodsi4>:
    15ce:	a1 e2       	ldi	r26, 0x21	; 33
    15d0:	1a 2e       	mov	r1, r26
    15d2:	aa 1b       	sub	r26, r26
    15d4:	bb 1b       	sub	r27, r27
    15d6:	fd 01       	movw	r30, r26
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <__udivmodsi4_ep>

000015da <__udivmodsi4_loop>:
    15da:	aa 1f       	adc	r26, r26
    15dc:	bb 1f       	adc	r27, r27
    15de:	ee 1f       	adc	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	a2 17       	cp	r26, r18
    15e4:	b3 07       	cpc	r27, r19
    15e6:	e4 07       	cpc	r30, r20
    15e8:	f5 07       	cpc	r31, r21
    15ea:	20 f0       	brcs	.+8      	; 0x15f4 <__udivmodsi4_ep>
    15ec:	a2 1b       	sub	r26, r18
    15ee:	b3 0b       	sbc	r27, r19
    15f0:	e4 0b       	sbc	r30, r20
    15f2:	f5 0b       	sbc	r31, r21

000015f4 <__udivmodsi4_ep>:
    15f4:	66 1f       	adc	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	88 1f       	adc	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	1a 94       	dec	r1
    15fe:	69 f7       	brne	.-38     	; 0x15da <__udivmodsi4_loop>
    1600:	60 95       	com	r22
    1602:	70 95       	com	r23
    1604:	80 95       	com	r24
    1606:	90 95       	com	r25
    1608:	9b 01       	movw	r18, r22
    160a:	ac 01       	movw	r20, r24
    160c:	bd 01       	movw	r22, r26
    160e:	cf 01       	movw	r24, r30
    1610:	08 95       	ret

00001612 <__divmodsi4>:
    1612:	05 2e       	mov	r0, r21
    1614:	97 fb       	bst	r25, 7
    1616:	1e f4       	brtc	.+6      	; 0x161e <__divmodsi4+0xc>
    1618:	00 94       	com	r0
    161a:	0e 94 20 0b 	call	0x1640	; 0x1640 <__negsi2>
    161e:	57 fd       	sbrc	r21, 7
    1620:	07 d0       	rcall	.+14     	; 0x1630 <__divmodsi4_neg2>
    1622:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodsi4>
    1626:	07 fc       	sbrc	r0, 7
    1628:	03 d0       	rcall	.+6      	; 0x1630 <__divmodsi4_neg2>
    162a:	4e f4       	brtc	.+18     	; 0x163e <__divmodsi4_exit>
    162c:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__negsi2>

00001630 <__divmodsi4_neg2>:
    1630:	50 95       	com	r21
    1632:	40 95       	com	r20
    1634:	30 95       	com	r19
    1636:	21 95       	neg	r18
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	4f 4f       	sbci	r20, 0xFF	; 255
    163c:	5f 4f       	sbci	r21, 0xFF	; 255

0000163e <__divmodsi4_exit>:
    163e:	08 95       	ret

00001640 <__negsi2>:
    1640:	90 95       	com	r25
    1642:	80 95       	com	r24
    1644:	70 95       	com	r23
    1646:	61 95       	neg	r22
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	08 95       	ret

00001650 <__umulhisi3>:
    1650:	a2 9f       	mul	r26, r18
    1652:	b0 01       	movw	r22, r0
    1654:	b3 9f       	mul	r27, r19
    1656:	c0 01       	movw	r24, r0
    1658:	a3 9f       	mul	r26, r19
    165a:	70 0d       	add	r23, r0
    165c:	81 1d       	adc	r24, r1
    165e:	11 24       	eor	r1, r1
    1660:	91 1d       	adc	r25, r1
    1662:	b2 9f       	mul	r27, r18
    1664:	70 0d       	add	r23, r0
    1666:	81 1d       	adc	r24, r1
    1668:	11 24       	eor	r1, r1
    166a:	91 1d       	adc	r25, r1
    166c:	08 95       	ret

0000166e <__muluhisi3>:
    166e:	0e 94 28 0b 	call	0x1650	; 0x1650 <__umulhisi3>
    1672:	a5 9f       	mul	r26, r21
    1674:	90 0d       	add	r25, r0
    1676:	b4 9f       	mul	r27, r20
    1678:	90 0d       	add	r25, r0
    167a:	a4 9f       	mul	r26, r20
    167c:	80 0d       	add	r24, r0
    167e:	91 1d       	adc	r25, r1
    1680:	11 24       	eor	r1, r1
    1682:	08 95       	ret

00001684 <__mulshisi3>:
    1684:	b7 ff       	sbrs	r27, 7
    1686:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__muluhisi3>

0000168a <__mulohisi3>:
    168a:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
    168e:	82 1b       	sub	r24, r18
    1690:	93 0b       	sbc	r25, r19
    1692:	08 95       	ret

00001694 <memcpy>:
    1694:	fb 01       	movw	r30, r22
    1696:	dc 01       	movw	r26, r24
    1698:	02 c0       	rjmp	.+4      	; 0x169e <memcpy+0xa>
    169a:	01 90       	ld	r0, Z+
    169c:	0d 92       	st	X+, r0
    169e:	41 50       	subi	r20, 0x01	; 1
    16a0:	50 40       	sbci	r21, 0x00	; 0
    16a2:	d8 f7       	brcc	.-10     	; 0x169a <memcpy+0x6>
    16a4:	08 95       	ret

000016a6 <eeprom_read_byte>:
    16a6:	f9 99       	sbic	0x1f, 1	; 31
    16a8:	fe cf       	rjmp	.-4      	; 0x16a6 <eeprom_read_byte>
    16aa:	92 bd       	out	0x22, r25	; 34
    16ac:	81 bd       	out	0x21, r24	; 33
    16ae:	f8 9a       	sbi	0x1f, 0	; 31
    16b0:	99 27       	eor	r25, r25
    16b2:	80 b5       	in	r24, 0x20	; 32
    16b4:	08 95       	ret

000016b6 <eeprom_write_block>:
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <eeprom_write_block+0xc>
    16bc:	2d 91       	ld	r18, X+
    16be:	0e 94 66 0b 	call	0x16cc	; 0x16cc <eeprom_write_r18>
    16c2:	41 50       	subi	r20, 0x01	; 1
    16c4:	50 40       	sbci	r21, 0x00	; 0
    16c6:	d0 f7       	brcc	.-12     	; 0x16bc <eeprom_write_block+0x6>
    16c8:	08 95       	ret

000016ca <eeprom_write_byte>:
    16ca:	26 2f       	mov	r18, r22

000016cc <eeprom_write_r18>:
    16cc:	f9 99       	sbic	0x1f, 1	; 31
    16ce:	fe cf       	rjmp	.-4      	; 0x16cc <eeprom_write_r18>
    16d0:	1f ba       	out	0x1f, r1	; 31
    16d2:	92 bd       	out	0x22, r25	; 34
    16d4:	81 bd       	out	0x21, r24	; 33
    16d6:	20 bd       	out	0x20, r18	; 32
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	fa 9a       	sbi	0x1f, 2	; 31
    16de:	f9 9a       	sbi	0x1f, 1	; 31
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	08 95       	ret

000016e6 <_exit>:
    16e6:	f8 94       	cli

000016e8 <__stop_program>:
    16e8:	ff cf       	rjmp	.-2      	; 0x16e8 <__stop_program>
